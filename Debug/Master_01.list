
Master_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000000c  08005590  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08005590  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014244  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035eb  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00038968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002408d  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f5d  00000000  00000000  0005d915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d260d  00000000  00000000  00073872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  00145ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800553c 	.word	0x0800553c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800553c 	.word	0x0800553c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000510:	4a22      	ldr	r2, [pc, #136]	; (800059c <MX_ADC2_Init+0xa0>)
 8000512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000516:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800051a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_ADC2_Init+0x9c>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000524:	2201      	movs	r2, #1
 8000526:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_ADC2_Init+0x9c>)
 800052a:	2201      	movs	r2, #1
 800052c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000540:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_ADC2_Init+0x9c>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_ADC2_Init+0x9c>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000562:	f000 ff85 	bl	8001470 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800056c:	f000 fac4 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000570:	230c      	movs	r3, #12
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000578:	2307      	movs	r3, #7
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_ADC2_Init+0x9c>)
 8000582:	f001 f917 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800058c:	f000 fab4 	bl	8000af8 <Error_Handler>
  }

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000080 	.word	0x20000080
 800059c:	40012100 	.word	0x40012100

080005a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a40      	ldr	r2, [pc, #256]	; (80006c0 <HAL_ADC_MspInit+0x120>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d17a      	bne.n	80006b8 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	4a3e      	ldr	r2, [pc, #248]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d0:	6453      	str	r3, [r2, #68]	; 0x44
 80005d2:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <HAL_ADC_MspInit+0x124>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2     ------> ADC2_IN12
    PC3     ------> ADC2_IN13
    PA4     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = H2_Analog_Pin|Speed_sensor_Pin;
 8000616:	230c      	movs	r3, #12
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4827      	ldr	r0, [pc, #156]	; (80006c8 <HAL_ADC_MspInit+0x128>)
 800062a:	f001 ffed 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_Battery_GPIO_Pin;
 800062e:	2310      	movs	r3, #16
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_Battery_GPIO_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4822      	ldr	r0, [pc, #136]	; (80006cc <HAL_ADC_MspInit+0x12c>)
 8000642:	f001 ffe1 	bl	8002608 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <HAL_ADC_MspInit+0x134>)
 800064a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 800064e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000652:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000666:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 800066a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800066e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000676:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 800067a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 800068e:	f001 fc29 	bl	8001ee4 <HAL_DMA_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000698:	f000 fa2e 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <HAL_ADC_MspInit+0x130>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2012      	movs	r0, #18
 80006ae:	f001 fb94 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006b2:	2012      	movs	r0, #18
 80006b4:	f001 fbad 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40012100 	.word	0x40012100
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	200000c8 	.word	0x200000c8
 80006d4:	40026440 	.word	0x40026440

080006d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_CRC_Init+0x20>)
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <MX_CRC_Init+0x24>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_CRC_Init+0x20>)
 80006e4:	f001 fbaf 	bl	8001e46 <HAL_CRC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ee:	f000 fa03 	bl	8000af8 <Error_Handler>
  }

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000128 	.word	0x20000128
 80006fc:	40023000 	.word	0x40023000

08000700 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <HAL_CRC_MspInit+0x3c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10d      	bne.n	800072e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_CRC_MspInit+0x40>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <HAL_CRC_MspInit+0x40>)
 800071c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <HAL_CRC_MspInit+0x40>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023000 	.word	0x40023000
 8000740:	40023800 	.word	0x40023800

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_DMA_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_DMA_Init+0x98>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_DMA_Init+0x98>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_DMA_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_DMA_Init+0x98>)
 8000770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_DMA_Init+0x98>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200c      	movs	r0, #12
 8000788:	f001 fb27 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800078c:	200c      	movs	r0, #12
 800078e:	f001 fb40 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200d      	movs	r0, #13
 8000798:	f001 fb1f 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800079c:	200d      	movs	r0, #13
 800079e:	f001 fb38 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200f      	movs	r0, #15
 80007a8:	f001 fb17 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f001 fb30 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	203a      	movs	r0, #58	; 0x3a
 80007b8:	f001 fb0f 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007bc:	203a      	movs	r0, #58	; 0x3a
 80007be:	f001 fb28 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2044      	movs	r0, #68	; 0x44
 80007c8:	f001 fb07 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80007cc:	2044      	movs	r0, #68	; 0x44
 80007ce:	f001 fb20 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b62      	ldr	r3, [pc, #392]	; (8000984 <MX_GPIO_Init+0x1a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a61      	ldr	r2, [pc, #388]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5f      	ldr	r3, [pc, #380]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a5a      	ldr	r2, [pc, #360]	; (8000984 <MX_GPIO_Init+0x1a4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b54      	ldr	r3, [pc, #336]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a53      	ldr	r2, [pc, #332]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b51      	ldr	r3, [pc, #324]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b4d      	ldr	r3, [pc, #308]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a4c      	ldr	r2, [pc, #304]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b4a      	ldr	r3, [pc, #296]	; (8000984 <MX_GPIO_Init+0x1a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_GPIO_Init+0x1a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a45      	ldr	r2, [pc, #276]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x1a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Solenoid_Valve_GPIO_GPIO_Port, Solenoid_Valve_GPIO_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	483f      	ldr	r0, [pc, #252]	; (8000988 <MX_GPIO_Init+0x1a8>)
 800088a:	f002 f851 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Horn_Pin|Emergency_Relay_GPIO_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000894:	483d      	ldr	r0, [pc, #244]	; (800098c <MX_GPIO_Init+0x1ac>)
 8000896:	f002 f84b 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC5 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6
 800089a:	f243 13e1 	movw	r3, #12769	; 0x31e1
 800089e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	; (8000988 <MX_GPIO_Init+0x1a8>)
 80008b0:	f001 feaa 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Emergency_button_Pin|Reset_button_Pin;
 80008b4:	2312      	movs	r3, #18
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4830      	ldr	r0, [pc, #192]	; (8000988 <MX_GPIO_Init+0x1a8>)
 80008c8:	f001 fe9e 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA5 PA6
                           PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80008cc:	f649 13ec 	movw	r3, #39404	; 0x99ec
 80008d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	482b      	ldr	r0, [pc, #172]	; (8000990 <MX_GPIO_Init+0x1b0>)
 80008e2:	f001 fe91 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = H2_Digital_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_GPIO_Init+0x1b4>)
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(H2_Digital_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4824      	ldr	r0, [pc, #144]	; (800098c <MX_GPIO_Init+0x1ac>)
 80008fa:	f001 fe85 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80008fe:	f24f 43f6 	movw	r3, #62710	; 0xf4f6
 8000902:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000904:	2303      	movs	r3, #3
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <MX_GPIO_Init+0x1ac>)
 8000914:	f001 fe78 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Solenoid_Valve_GPIO_Pin;
 8000918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Solenoid_Valve_GPIO_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4815      	ldr	r0, [pc, #84]	; (8000988 <MX_GPIO_Init+0x1a8>)
 8000932:	f001 fe69 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000936:	2304      	movs	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_GPIO_Init+0x1b8>)
 800094a:	f001 fe5d 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Horn_Pin|Emergency_Relay_GPIO_Pin;
 800094e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <MX_GPIO_Init+0x1ac>)
 8000968:	f001 fe4e 	bl	8002608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2006      	movs	r0, #6
 8000972:	f001 fa32 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000976:	2006      	movs	r0, #6
 8000978:	f001 fa4b 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020400 	.word	0x40020400
 8000990:	40020000 	.word	0x40020000
 8000994:	10210000 	.word	0x10210000
 8000998:	40020c00 	.word	0x40020c00

0800099c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_IWDG_Init+0x2c>)
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <MX_IWDG_Init+0x30>)
 80009a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_IWDG_Init+0x2c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_IWDG_Init+0x2c>)
 80009ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_IWDG_Init+0x2c>)
 80009b6:	f001 fff8 	bl	80029aa <HAL_IWDG_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009c0:	f000 f89a 	bl	8000af8 <Error_Handler>
  }

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000130 	.word	0x20000130
 80009cc:	40003000 	.word	0x40003000

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fcda 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f81a 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff ff00 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e0:	f7ff feb0 	bl	8000744 <MX_DMA_Init>
  MX_UART4_Init();
 80009e4:	f000 fa94 	bl	8000f10 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80009e8:	f000 fabc 	bl	8000f64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009ec:	f000 f978 	bl	8000ce0 <MX_TIM2_Init>
  MX_ADC2_Init();
 80009f0:	f7ff fd84 	bl	80004fc <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 fae0 	bl	8000fb8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80009f8:	f7ff fe6e 	bl	80006d8 <MX_CRC_Init>
  MX_IWDG_Init();
 80009fc:	f7ff ffce 	bl	800099c <MX_IWDG_Init>
  MX_TIM6_Init();
 8000a00:	f000 f9ba 	bl	8000d78 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000a04:	f000 f9ec 	bl	8000de0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start_IT(&htim2);
  //HAL_ADC_Start_DMA(&hadc2, &adc_data, 1);
  hydrogreen_main();
 8000a08:	f004 f9e0 	bl	8004dcc <hydrogreen_main>
  //ADC_SetActiveChannel( &hadc2,12);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x3c>
	...

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2234      	movs	r2, #52	; 0x34
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fd84 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <SystemClock_Config+0xe0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a2c      	ldr	r2, [pc, #176]	; (8000af0 <SystemClock_Config+0xe0>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <SystemClock_Config+0xe0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <SystemClock_Config+0xe4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <SystemClock_Config+0xe4>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <SystemClock_Config+0xe4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a84:	2308      	movs	r3, #8
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a88:	23b4      	movs	r3, #180	; 0xb4
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fae9 	bl	8003074 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa8:	f000 f826 	bl	8000af8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aac:	f001 ffc6 	bl	8002a3c <HAL_PWREx_EnableOverDrive>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ab6:	f000 f81f 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	230f      	movs	r3, #15
 8000abc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 ffff 	bl	8002adc <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ae4:	f000 f808 	bl	8000af8 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	; 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	hydrogreen_hardFault();
 8000afc:	f004 f988 	bl	8004e10 <hydrogreen_hardFault>
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f001 f93e 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 8000ba8:	f004 fc36 	bl	8005418 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fc40 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f001 fed3 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8000bca:	f001 fab3 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000025c 	.word	0x2000025c

08000bd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Stream2_IRQHandler+0x10>)
 8000bde:	f001 faa9 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001fc 	.word	0x200001fc

08000bec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA1_Stream4_IRQHandler+0x10>)
 8000bf2:	f001 fa9f 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200003dc 	.word	0x200003dc

08000c00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <ADC_IRQHandler+0x10>)
 8000c06:	f000 fc76 	bl	80014f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000080 	.word	0x20000080

08000c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM2_IRQHandler+0x10>)
 8000c1a:	f002 fcd4 	bl	80035c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000017c 	.word	0x2000017c

08000c28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USART1_IRQHandler+0x10>)
 8000c2e:	f003 f9ef 	bl	8004010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000035c 	.word	0x2000035c

08000c3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <USART3_IRQHandler+0x10>)
 8000c42:	f003 f9e5 	bl	8004010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200002bc 	.word	0x200002bc

08000c50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <UART4_IRQHandler+0x10>)
 8000c56:	f003 f9db 	bl	8004010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000039c 	.word	0x2000039c

08000c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM6_DAC_IRQHandler+0x10>)
 8000c6a:	f002 fcac 	bl	80035c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000013c 	.word	0x2000013c

08000c78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM7_IRQHandler+0x10>)
 8000c7e:	f002 fca2 	bl	80035c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001bc 	.word	0x200001bc

08000c8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <DMA2_Stream2_IRQHandler+0x10>)
 8000c92:	f001 fa4f 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c8 	.word	0x200000c8

08000ca0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA2_Stream5_IRQHandler+0x10>)
 8000ca6:	f001 fa45 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002fc 	.word	0x200002fc

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <SystemInit+0x28>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <SystemInit+0x28>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SystemInit+0x28>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cce:	609a      	str	r2, [r3, #8]
#endif
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d06:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d14:	2231      	movs	r2, #49	; 0x31
 8000d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d26:	f002 fbff 	bl	8003528 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d30:	f7ff fee2 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d42:	f002 fd48 	bl	80037d6 <HAL_TIM_ConfigClockSource>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d4c:	f7ff fed4 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d50:	2320      	movs	r3, #32
 8000d52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_TIM2_Init+0x94>)
 8000d5e:	f002 ff61 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f7ff fec6 	bl	8000af8 <Error_Handler>
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000017c 	.word	0x2000017c

08000d78 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <MX_TIM6_Init+0x64>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000d8e:	2259      	movs	r2, #89	; 0x59
 8000d90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000d9a:	2263      	movs	r2, #99	; 0x63
 8000d9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000da6:	f002 fbbf 	bl	8003528 <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000db0:	f7ff fea2 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_TIM6_Init+0x60>)
 8000dc2:	f002 ff2f 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f7ff fe94 	bl	8000af8 <Error_Handler>
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000013c 	.word	0x2000013c
 8000ddc:	40001000 	.word	0x40001000

08000de0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MX_TIM7_Init+0x68>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000df6:	2259      	movs	r2, #89	; 0x59
 8000df8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e10:	f002 fb8a 	bl	8003528 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e1a:	f7ff fe6d 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e2c:	f002 fefa 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f7ff fe5f 	bl	8000af8 <Error_Handler>
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001bc 	.word	0x200001bc
 8000e48:	40001400 	.word	0x40001400

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d116      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	201c      	movs	r0, #28
 8000e80:	f000 ffab 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e84:	201c      	movs	r0, #28
 8000e86:	f000 ffc4 	bl	8001e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e8a:	e036      	b.n	8000efa <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d116      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2036      	movs	r0, #54	; 0x36
 8000eb8:	f000 ff8f 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	; 0x36
 8000ebe:	f000 ffa8 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 8000ec2:	e01a      	b.n	8000efa <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_TIM_Base_MspInit+0xc0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d115      	bne.n	8000efa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2037      	movs	r0, #55	; 0x37
 8000ef0:	f000 ff73 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ef4:	2037      	movs	r0, #55	; 0x37
 8000ef6:	f000 ff8c 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40001000 	.word	0x40001000
 8000f0c:	40001400 	.word	0x40001400

08000f10 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_UART4_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f46:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_UART4_Init+0x4c>)
 8000f4a:	f002 fefb 	bl	8003d44 <HAL_UART_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000f54:	f7ff fdd0 	bl	8000af8 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000039c 	.word	0x2000039c
 8000f60:	40004c00 	.word	0x40004c00

08000f64 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART1_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f70:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f9a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	f002 fed1 	bl	8003d44 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000fa8:	f7ff fda6 	bl	8000af8 <Error_Handler>
  }

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000035c 	.word	0x2000035c
 8000fb4:	40011000 	.word	0x40011000

08000fb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_USART3_UART_Init+0x50>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000ff0:	f002 fea8 	bl	8003d44 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ffa:	f7ff fd7d 	bl	8000af8 <Error_Handler>
  }

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002bc 	.word	0x200002bc
 8001008:	40004800 	.word	0x40004800

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a7e      	ldr	r2, [pc, #504]	; (8001224 <HAL_UART_MspInit+0x218>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 8091 	bne.w	8001152 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a7b      	ldr	r2, [pc, #492]	; (8001228 <HAL_UART_MspInit+0x21c>)
 800103a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b79      	ldr	r3, [pc, #484]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a74      	ldr	r2, [pc, #464]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b72      	ldr	r3, [pc, #456]	; (8001228 <HAL_UART_MspInit+0x21c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Data_Logger_TX_Pin|Data_Logger_RX_Pin;
 8001068:	2303      	movs	r3, #3
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	2301      	movs	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001078:	2308      	movs	r3, #8
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	486a      	ldr	r0, [pc, #424]	; (800122c <HAL_UART_MspInit+0x220>)
 8001084:	f001 fac0 	bl	8002608 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <HAL_UART_MspInit+0x224>)
 800108a:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <HAL_UART_MspInit+0x228>)
 800108c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800108e:	4b68      	ldr	r3, [pc, #416]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001094:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001096:	4b66      	ldr	r3, [pc, #408]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b64      	ldr	r3, [pc, #400]	; (8001230 <HAL_UART_MspInit+0x224>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b63      	ldr	r3, [pc, #396]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010aa:	4b61      	ldr	r3, [pc, #388]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80010c8:	4859      	ldr	r0, [pc, #356]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010ca:	f000 ff0b 	bl	8001ee4 <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010d4:	f7ff fd10 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
 80010de:	4a54      	ldr	r2, [pc, #336]	; (8001230 <HAL_UART_MspInit+0x224>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <HAL_UART_MspInit+0x22c>)
 80010e6:	4a55      	ldr	r2, [pc, #340]	; (800123c <HAL_UART_MspInit+0x230>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_UART_MspInit+0x22c>)
 80010ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f2:	4b51      	ldr	r3, [pc, #324]	; (8001238 <HAL_UART_MspInit+0x22c>)
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f8:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <HAL_UART_MspInit+0x22c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fe:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <HAL_UART_MspInit+0x22c>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <HAL_UART_MspInit+0x22c>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001124:	4844      	ldr	r0, [pc, #272]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001126:	f000 fedd 	bl	8001ee4 <HAL_DMA_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001130:	f7ff fce2 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a40      	ldr	r2, [pc, #256]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_UART_MspInit+0x22c>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2034      	movs	r0, #52	; 0x34
 8001146:	f000 fe48 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800114a:	2034      	movs	r0, #52	; 0x34
 800114c:	f000 fe61 	bl	8001e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001150:	e0e4      	b.n	800131c <HAL_UART_MspInit+0x310>
  else if(uartHandle->Instance==USART1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <HAL_UART_MspInit+0x234>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d177      	bne.n	800124c <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a30      	ldr	r2, [pc, #192]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_UART_MspInit+0x21c>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_UART_MspInit+0x21c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a29      	ldr	r2, [pc, #164]	; (8001228 <HAL_UART_MspInit+0x21c>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <HAL_UART_MspInit+0x21c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Energy_Flow_TX_Pin|Energy_Flow_RX_Pin;
 8001194:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a6:	2307      	movs	r3, #7
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <HAL_UART_MspInit+0x220>)
 80011b2:	f001 fa29 	bl	8002608 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011b8:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_UART_MspInit+0x23c>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <HAL_UART_MspInit+0x238>)
 80011f8:	f000 fe74 	bl	8001ee4 <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8001202:	f7ff fc79 	bl	8000af8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_UART_MspInit+0x238>)
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_UART_MspInit+0x238>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2025      	movs	r0, #37	; 0x25
 8001218:	f000 fddf 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121c:	2025      	movs	r0, #37	; 0x25
 800121e:	f000 fdf8 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 8001222:	e07b      	b.n	800131c <HAL_UART_MspInit+0x310>
 8001224:	40004c00 	.word	0x40004c00
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	200001fc 	.word	0x200001fc
 8001234:	40026040 	.word	0x40026040
 8001238:	200003dc 	.word	0x200003dc
 800123c:	40026070 	.word	0x40026070
 8001240:	40011000 	.word	0x40011000
 8001244:	200002fc 	.word	0x200002fc
 8001248:	40026488 	.word	0x40026488
  else if(uartHandle->Instance==USART3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a34      	ldr	r2, [pc, #208]	; (8001324 <HAL_UART_MspInit+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d162      	bne.n	800131c <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <HAL_UART_MspInit+0x31c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_UART_MspInit+0x31c>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_UART_MspInit+0x31c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_UART_MspInit+0x31c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a2b      	ldr	r2, [pc, #172]	; (8001328 <HAL_UART_MspInit+0x31c>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_UART_MspInit+0x31c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Steering_Wheel_TX_Pin|Steering_Wheel_RX_Pin;
 800128e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a0:	2307      	movs	r3, #7
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4820      	ldr	r0, [pc, #128]	; (800132c <HAL_UART_MspInit+0x320>)
 80012ac:	f001 f9ac 	bl	8002608 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <HAL_UART_MspInit+0x328>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_UART_MspInit+0x324>)
 80012f2:	f000 fdf7 	bl	8001ee4 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 80012fc:	f7ff fbfc 	bl	8000af8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_UART_MspInit+0x324>)
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_UART_MspInit+0x324>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2027      	movs	r0, #39	; 0x27
 8001312:	f000 fd62 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001316:	2027      	movs	r0, #39	; 0x27
 8001318:	f000 fd7b 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004800 	.word	0x40004800
 8001328:	40023800 	.word	0x40023800
 800132c:	40020800 	.word	0x40020800
 8001330:	2000025c 	.word	0x2000025c
 8001334:	40026028 	.word	0x40026028

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800133c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800133e:	e003      	b.n	8001348 <LoopCopyDataInit>

08001340 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001342:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001344:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001346:	3104      	adds	r1, #4

08001348 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800134c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001350:	d3f6      	bcc.n	8001340 <CopyDataInit>
  ldr  r2, =_sbss
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001354:	e002      	b.n	800135c <LoopFillZerobss>

08001356 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001356:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001358:	f842 3b04 	str.w	r3, [r2], #4

0800135c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001360:	d3f9      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001362:	f7ff fca7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f004 f8bd 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff fb31 	bl	80009d0 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001374:	08005584 	.word	0x08005584
  ldr  r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001380:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001384:	200004a8 	.word	0x200004a8

08001388 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <CAN1_RX0_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 fd05 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fba0 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fd1d 	bl	8001e2e <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 fce5 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	2000043c 	.word	0x2000043c

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000043c 	.word	0x2000043c

08001470 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e033      	b.n	80014ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff f886 	bl	80005a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b6:	f023 0302 	bic.w	r3, r3, #2
 80014ba:	f043 0202 	orr.w	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 faa8 	bl	8001a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
 80014de:	e001      	b.n	80014e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b02      	cmp	r3, #2
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b20      	cmp	r3, #32
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d049      	beq.n	80015cc <HAL_ADC_IRQHandler+0xd6>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d046      	beq.n	80015cc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d12b      	bne.n	80015bc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d127      	bne.n	80015bc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001584:	2b00      	cmp	r3, #0
 8001586:	d119      	bne.n	80015bc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0220 	bic.w	r2, r2, #32
 8001596:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8db 	bl	8001778 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f06f 0212 	mvn.w	r2, #18
 80015ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d057      	beq.n	80016ae <HAL_ADC_IRQHandler+0x1b8>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d054      	beq.n	80016ae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d139      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001642:	2b00      	cmp	r3, #0
 8001644:	d12b      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001650:	2b00      	cmp	r3, #0
 8001652:	d124      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11d      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d119      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fab6 	bl	8001c10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 020c 	mvn.w	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	bf0c      	ite	eq
 80016d2:	2301      	moveq	r3, #1
 80016d4:	2300      	movne	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d017      	beq.n	8001710 <HAL_ADC_IRQHandler+0x21a>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d014      	beq.n	8001710 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10d      	bne.n	8001710 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f843 	bl	800178c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f06f 0201 	mvn.w	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b20      	cmp	r3, #32
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001734:	bf0c      	ite	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	2300      	movne	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <HAL_ADC_IRQHandler+0x27a>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f043 0202 	orr.w	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f06f 0220 	mvn.w	r2, #32
 800175e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f81d 	bl	80017a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f06f 0220 	mvn.w	r2, #32
 800176e:	601a      	str	r2, [r3, #0]
  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1c>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e113      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x244>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d925      	bls.n	800182c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68d9      	ldr	r1, [r3, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	3b1e      	subs	r3, #30
 80017f6:	2207      	movs	r2, #7
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43da      	mvns	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	400a      	ands	r2, r1
 8001804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68d9      	ldr	r1, [r3, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4618      	mov	r0, r3
 8001818:	4603      	mov	r3, r0
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4403      	add	r3, r0
 800181e:	3b1e      	subs	r3, #30
 8001820:	409a      	lsls	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e022      	b.n	8001872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	2207      	movs	r2, #7
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	4603      	mov	r3, r0
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4403      	add	r3, r0
 8001868:	409a      	lsls	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b06      	cmp	r3, #6
 8001878:	d824      	bhi.n	80018c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b05      	subs	r3, #5
 800188c:	221f      	movs	r2, #31
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	400a      	ands	r2, r1
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b05      	subs	r3, #5
 80018b6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	e04c      	b.n	800195e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d824      	bhi.n	8001916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3b23      	subs	r3, #35	; 0x23
 80018de:	221f      	movs	r2, #31
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b23      	subs	r3, #35	; 0x23
 8001908:	fa00 f203 	lsl.w	r2, r0, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
 8001914:	e023      	b.n	800195e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b41      	subs	r3, #65	; 0x41
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b41      	subs	r3, #65	; 0x41
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_ADC_ConfigChannel+0x250>)
 8001960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_ADC_ConfigChannel+0x254>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d10f      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d8>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b12      	cmp	r3, #18
 8001972:	d10b      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_ADC_ConfigChannel+0x254>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x23a>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_ADC_ConfigChannel+0x258>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_ADC_ConfigChannel+0x1f4>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b11      	cmp	r3, #17
 80019a6:	d122      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_ADC_ConfigChannel+0x258>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d111      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_ADC_ConfigChannel+0x25c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_ADC_ConfigChannel+0x260>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9a      	lsrs	r2, r3, #18
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40012300 	.word	0x40012300
 8001a08:	40012000 	.word	0x40012000
 8001a0c:	10000012 	.word	0x10000012
 8001a10:	20000000 	.word	0x20000000
 8001a14:	431bde83 	.word	0x431bde83

08001a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <ADC_Init+0x1f0>)
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	021a      	lsls	r2, r3, #8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <ADC_Init+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001abe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	e00f      	b.n	8001b16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0202 	bic.w	r2, r2, #2
 8001b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]
 8001b30:	005a      	lsls	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01b      	beq.n	8001b7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	035a      	lsls	r2, r3, #13
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e007      	b.n	8001b8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	051a      	lsls	r2, r3, #20
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bce:	025a      	lsls	r2, r3, #9
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	029a      	lsls	r2, r3, #10
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40012300 	.word	0x40012300
 8001c0c:	0f000001 	.word	0x0f000001

08001c10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e00e      	b.n	8001e76 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	795b      	ldrb	r3, [r3, #5]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe fc49 	bl	8000700 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2202      	movs	r2, #2
 8001e92:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e00a      	b.n	8001ec0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3f0      	bcc.n	8001eaa <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001ed6:	693b      	ldr	r3, [r7, #16]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff fab2 	bl	8001458 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e099      	b.n	8002034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f20:	e00f      	b.n	8001f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f22:	f7ff fa99 	bl	8001458 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d908      	bls.n	8001f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e078      	b.n	8002034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e8      	bne.n	8001f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_DMA_Init+0x158>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f023 0307 	bic.w	r3, r3, #7
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d117      	bne.n	8002006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fa91 	bl	8002510 <DMA_CheckFifoParam>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002002:	2301      	movs	r3, #1
 8002004:	e016      	b.n	8002034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa48 	bl	80024a4 <DMA_CalcBaseAndBitshift>
 8002014:	4603      	mov	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	223f      	movs	r2, #63	; 0x3f
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	f010803f 	.word	0xf010803f

08002040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Start_IT+0x26>
 8002062:	2302      	movs	r3, #2
 8002064:	e040      	b.n	80020e8 <HAL_DMA_Start_IT+0xa8>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d12f      	bne.n	80020da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9da 	bl	8002448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	223f      	movs	r2, #63	; 0x3f
 800209a:	409a      	lsls	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0216 	orr.w	r2, r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e005      	b.n	80020e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d004      	beq.n	800210e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00c      	b.n	8002128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_DMA_IRQHandler+0x258>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_DMA_IRQHandler+0x25c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2208      	movs	r2, #8
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2208      	movs	r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d043      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03c      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2210      	movs	r2, #16
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e01f      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e016      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2220      	movs	r2, #32
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 808e 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8086 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2220      	movs	r2, #32
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d136      	bne.n	800234c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0216 	bic.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_DMA_IRQHandler+0x1da>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07d      	beq.n	800243e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
        }
        return;
 800234a:	e078      	b.n	800243e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01c      	beq.n	8002394 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	2b00      	cmp	r3, #0
 800236e:	d030      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e02b      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e022      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
 800238c:	20000000 	.word	0x20000000
 8002390:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0210 	bic.w	r2, r2, #16
 80023b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d032      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d022      	beq.n	800242c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	d307      	bcc.n	800241a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_DMA_IRQHandler+0x2ca>
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800241a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0x30c>
        return;
 800243e:	bf00      	nop
    }
  }
}
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop

08002448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d108      	bne.n	8002488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002486:	e007      	b.n	8002498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b10      	subs	r3, #16
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <DMA_CalcBaseAndBitshift+0x64>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <DMA_CalcBaseAndBitshift+0x68>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d909      	bls.n	80024e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
 80024e4:	e007      	b.n	80024f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	aaaaaaab 	.word	0xaaaaaaab
 800250c:	0800556c 	.word	0x0800556c

08002510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0x5a>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d856      	bhi.n	80025de <DMA_CheckFifoParam+0xce>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800255b 	.word	0x0800255b
 8002540:	08002549 	.word	0x08002549
 8002544:	080025df 	.word	0x080025df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e043      	b.n	80025e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002562:	d140      	bne.n	80025e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e03d      	b.n	80025e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002572:	d121      	bne.n	80025b8 <DMA_CheckFifoParam+0xa8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d837      	bhi.n	80025ea <DMA_CheckFifoParam+0xda>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <DMA_CheckFifoParam+0x70>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002597 	.word	0x08002597
 8002588:	08002591 	.word	0x08002591
 800258c:	080025a9 	.word	0x080025a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e030      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d025      	beq.n	80025ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e022      	b.n	80025ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b0:	d11f      	bne.n	80025f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b6:	e01c      	b.n	80025f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d903      	bls.n	80025c6 <DMA_CheckFifoParam+0xb6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c4:	e018      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ca:	e015      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e00b      	b.n	80025f6 <DMA_CheckFifoParam+0xe6>
      break;
 80025de:	bf00      	nop
 80025e0:	e00a      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e008      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e006      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
    }
  } 
  
  return status; 
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e165      	b.n	80028f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8154 	bne.w	80028ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d00b      	beq.n	8002662 <HAL_GPIO_Init+0x5a>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002656:	2b11      	cmp	r3, #17
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b12      	cmp	r3, #18
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0xfc>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b12      	cmp	r3, #18
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ae 	beq.w	80028ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <HAL_GPIO_Init+0x300>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a5c      	ldr	r2, [pc, #368]	; (8002908 <HAL_GPIO_Init+0x300>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_GPIO_Init+0x300>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_GPIO_Init+0x304>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_GPIO_Init+0x308>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d025      	beq.n	8002822 <HAL_GPIO_Init+0x21a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <HAL_GPIO_Init+0x30c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01f      	beq.n	800281e <HAL_GPIO_Init+0x216>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4d      	ldr	r2, [pc, #308]	; (8002918 <HAL_GPIO_Init+0x310>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x212>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	; (800291c <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x20a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x206>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x202>
 8002806:	2306      	movs	r3, #6
 8002808:	e00c      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 800280a:	2307      	movs	r3, #7
 800280c:	e00a      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 800280e:	2305      	movs	r3, #5
 8002810:	e008      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 8002812:	2304      	movs	r3, #4
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 8002816:	2303      	movs	r3, #3
 8002818:	e004      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 800281a:	2302      	movs	r3, #2
 800281c:	e002      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_GPIO_Init+0x21c>
 8002822:	2300      	movs	r3, #0
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f002 0203 	and.w	r2, r2, #3
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	4093      	lsls	r3, r2
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002834:	4935      	ldr	r1, [pc, #212]	; (800290c <HAL_GPIO_Init+0x304>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_GPIO_Init+0x324>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002866:	4a31      	ldr	r2, [pc, #196]	; (800292c <HAL_GPIO_Init+0x324>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800286c:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_GPIO_Init+0x324>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002890:	4a26      	ldr	r2, [pc, #152]	; (800292c <HAL_GPIO_Init+0x324>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_GPIO_Init+0x324>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_GPIO_Init+0x324>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_GPIO_Init+0x324>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_GPIO_Init+0x324>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f67f ae96 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40013800 	.word	0x40013800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40020800 	.word	0x40020800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40021400 	.word	0x40021400
 8002928:	40021800 	.word	0x40021800
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f806 	bl	8002994 <HAL_GPIO_EXTI_Callback>
  }
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e02b      	b.n	8002a14 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80029c4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f245 5255 	movw	r2, #21845	; 0x5555
 80029ce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80029e4:	f7fe fd38 	bl	8001458 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80029ea:	e008      	b.n	80029fe <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80029ec:	f7fe fd34 	bl	8001458 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b30      	cmp	r3, #48	; 0x30
 80029f8:	d901      	bls.n	80029fe <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e00a      	b.n	8002a14 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f1      	bne.n	80029ec <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002a10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_PWREx_EnableOverDrive+0x90>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_PWREx_EnableOverDrive+0x90>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_PWREx_EnableOverDrive+0x90>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a68:	f7fe fcf6 	bl	8001458 <HAL_GetTick>
 8002a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a6e:	e009      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a70:	f7fe fcf2 	bl	8001458 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a7e:	d901      	bls.n	8002a84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e01f      	b.n	8002ac4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d1ee      	bne.n	8002a70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a98:	f7fe fcde 	bl	8001458 <HAL_GetTick>
 8002a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a9e:	e009      	b.n	8002ab4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa0:	f7fe fcda 	bl	8001458 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aae:	d901      	bls.n	8002ab4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e007      	b.n	8002ac4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	420e0040 	.word	0x420e0040
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	420e0044 	.word	0x420e0044

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fc44 	bl	8001458 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7fe fc40 	bl	8001458 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f855 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fba4 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08005554 	.word	0x08005554
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005564 	.word	0x08005564

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08005564 	.word	0x08005564

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2c:	4bce      	ldr	r3, [pc, #824]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	f200 818d 	bhi.w	8003054 <HAL_RCC_GetSysClockFreq+0x344>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d75 	.word	0x08002d75
 8002d44:	08003055 	.word	0x08003055
 8002d48:	08003055 	.word	0x08003055
 8002d4c:	08003055 	.word	0x08003055
 8002d50:	08002d7b 	.word	0x08002d7b
 8002d54:	08003055 	.word	0x08003055
 8002d58:	08003055 	.word	0x08003055
 8002d5c:	08003055 	.word	0x08003055
 8002d60:	08002d81 	.word	0x08002d81
 8002d64:	08003055 	.word	0x08003055
 8002d68:	08003055 	.word	0x08003055
 8002d6c:	08003055 	.word	0x08003055
 8002d70:	08002ef5 	.word	0x08002ef5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4bbd      	ldr	r3, [pc, #756]	; (800306c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d76:	61bb      	str	r3, [r7, #24]
       break;
 8002d78:	e16f      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4bbd      	ldr	r3, [pc, #756]	; (8003070 <HAL_RCC_GetSysClockFreq+0x360>)
 8002d7c:	61bb      	str	r3, [r7, #24]
      break;
 8002d7e:	e16c      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4bb9      	ldr	r3, [pc, #740]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8a:	4bb7      	ldr	r3, [pc, #732]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d053      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4bb4      	ldr	r3, [pc, #720]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	ea02 0400 	and.w	r4, r2, r0
 8002dae:	603c      	str	r4, [r7, #0]
 8002db0:	400b      	ands	r3, r1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	014b      	lsls	r3, r1, #5
 8002dc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dca:	0142      	lsls	r2, r0, #5
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	1ac0      	subs	r0, r0, r3
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	eb61 0103 	sbc.w	r1, r1, r3
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002de8:	0182      	lsls	r2, r0, #6
 8002dea:	1a12      	subs	r2, r2, r0
 8002dec:	eb63 0301 	sbc.w	r3, r3, r1
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	00d9      	lsls	r1, r3, #3
 8002dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dfe:	00d0      	lsls	r0, r2, #3
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4621      	mov	r1, r4
 8002e06:	1852      	adds	r2, r2, r1
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb43 0101 	adc.w	r1, r3, r1
 8002e0e:	460b      	mov	r3, r1
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	0259      	lsls	r1, r3, #9
 8002e1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e1e:	0250      	lsls	r0, r2, #9
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	f7fd f9e8 	bl	8000204 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	e04c      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	461a      	mov	r2, r3
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	ea02 0a00 	and.w	sl, r2, r0
 8002e56:	ea03 0b01 	and.w	fp, r3, r1
 8002e5a:	4650      	mov	r0, sl
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	014b      	lsls	r3, r1, #5
 8002e68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e6c:	0142      	lsls	r2, r0, #5
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	ebb0 000a 	subs.w	r0, r0, sl
 8002e76:	eb61 010b 	sbc.w	r1, r1, fp
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e88:	0182      	lsls	r2, r0, #6
 8002e8a:	1a12      	subs	r2, r2, r0
 8002e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e90:	f04f 0000 	mov.w	r0, #0
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	00d9      	lsls	r1, r3, #3
 8002e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e9e:	00d0      	lsls	r0, r2, #3
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	eb12 020a 	adds.w	r2, r2, sl
 8002ea8:	eb43 030b 	adc.w	r3, r3, fp
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0299      	lsls	r1, r3, #10
 8002eb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eba:	0290      	lsls	r0, r2, #10
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	f7fd f99a 	bl	8000204 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed8:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
      break;
 8002ef2:	e0b2      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04d      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	461a      	mov	r2, r3
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	ea02 0800 	and.w	r8, r2, r0
 8002f22:	ea03 0901 	and.w	r9, r3, r1
 8002f26:	4640      	mov	r0, r8
 8002f28:	4649      	mov	r1, r9
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	014b      	lsls	r3, r1, #5
 8002f34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f38:	0142      	lsls	r2, r0, #5
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f42:	eb61 0109 	sbc.w	r1, r1, r9
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	018b      	lsls	r3, r1, #6
 8002f50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f54:	0182      	lsls	r2, r0, #6
 8002f56:	1a12      	subs	r2, r2, r0
 8002f58:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	00d9      	lsls	r1, r3, #3
 8002f66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f6a:	00d0      	lsls	r0, r2, #3
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	eb12 0208 	adds.w	r2, r2, r8
 8002f74:	eb43 0309 	adc.w	r3, r3, r9
 8002f78:	f04f 0000 	mov.w	r0, #0
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	0259      	lsls	r1, r3, #9
 8002f82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f86:	0250      	lsls	r0, r2, #9
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	f7fd f934 	bl	8000204 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e04a      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	ea02 0400 	and.w	r4, r2, r0
 8002fbe:	ea03 0501 	and.w	r5, r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	014b      	lsls	r3, r1, #5
 8002fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd4:	0142      	lsls	r2, r0, #5
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	1b00      	subs	r0, r0, r4
 8002fdc:	eb61 0105 	sbc.w	r1, r1, r5
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	018b      	lsls	r3, r1, #6
 8002fea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fee:	0182      	lsls	r2, r0, #6
 8002ff0:	1a12      	subs	r2, r2, r0
 8002ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	00d9      	lsls	r1, r3, #3
 8003000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003004:	00d0      	lsls	r0, r2, #3
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	1912      	adds	r2, r2, r4
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0299      	lsls	r1, r3, #10
 800301a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800301e:	0290      	lsls	r0, r2, #10
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	461a      	mov	r2, r3
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	f7fd f8e8 	bl	8000204 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4613      	mov	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0f1b      	lsrs	r3, r3, #28
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	61bb      	str	r3, [r7, #24]
      break;
 8003052:	e002      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003056:	61bb      	str	r3, [r7, #24]
      break;
 8003058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305a:	69bb      	ldr	r3, [r7, #24]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	00f42400 	.word	0x00f42400
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8083 	beq.w	8003194 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800308e:	4b95      	ldr	r3, [pc, #596]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d019      	beq.n	80030ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800309a:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a6:	4b8f      	ldr	r3, [pc, #572]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b2:	d00c      	beq.n	80030ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b4:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d112      	bne.n	80030e6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c0:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d05b      	beq.n	8003192 <HAL_RCC_OscConfig+0x11e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d157      	bne.n	8003192 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e216      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x8a>
 80030f0:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7b      	ldr	r2, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e01d      	b.n	800313a <HAL_RCC_OscConfig+0xc6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_OscConfig+0xae>
 8003108:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800310e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a72      	ldr	r2, [pc, #456]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e00b      	b.n	800313a <HAL_RCC_OscConfig+0xc6>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fe f989 	bl	8001458 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314a:	f7fe f985 	bl	8001458 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1db      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315c:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0xd6>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe f975 	bl	8001458 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003172:	f7fe f971 	bl	8001458 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1c7      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003184:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0xfe>
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d06f      	beq.n	8003280 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ac:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c4:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d11c      	bne.n	800320a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d0:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x180>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e18f      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4938      	ldr	r1, [pc, #224]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003208:	e03a      	b.n	8003280 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe f91e 	bl	8001458 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe f91a 	bl	8001458 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e170      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe f8fd 	bl	8001458 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe f8f9 	bl	8001458 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e14f      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d037      	beq.n	80032fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x278>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f8dd 	bl	8001458 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe f8d9 	bl	8001458 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e12f      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x22e>
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_OscConfig+0x278>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe f8c6 	bl	8001458 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ce:	e00f      	b.n	80032f0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe f8c2 	bl	8001458 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d908      	bls.n	80032f0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e118      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b8a      	ldr	r3, [pc, #552]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e9      	bne.n	80032d0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b83      	ldr	r3, [pc, #524]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7e      	ldr	r2, [pc, #504]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7c      	ldr	r3, [pc, #496]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b79      	ldr	r3, [pc, #484]	; (8003520 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a75      	ldr	r2, [pc, #468]	; (8003520 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe f881 	bl	8001458 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe f87d 	bl	8001458 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0d3      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x31a>
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x354>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x33c>
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a60      	ldr	r2, [pc, #384]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5e      	ldr	r3, [pc, #376]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x354>
 80033b0:	4b5a      	ldr	r3, [pc, #360]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a59      	ldr	r2, [pc, #356]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a56      	ldr	r2, [pc, #344]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe f842 	bl	8001458 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe f83e 	bl	8001458 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e092      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x364>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe f82c 	bl	8001458 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe f828 	bl	8001458 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e07c      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b40      	ldr	r3, [pc, #256]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a3a      	ldr	r2, [pc, #232]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d068      	beq.n	8003512 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d060      	beq.n	800350e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d145      	bne.n	80034e0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_RCC_OscConfig+0x4b0>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd fffd 	bl	8001458 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fd fff9 	bl	8001458 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e04f      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	019b      	lsls	r3, r3, #6
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	071b      	lsls	r3, r3, #28
 80034ac:	491b      	ldr	r1, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_RCC_OscConfig+0x4b0>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd ffce 	bl	8001458 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd ffca 	bl	8001458 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e020      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x44c>
 80034de:	e018      	b.n	8003512 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_OscConfig+0x4b0>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd ffb7 	bl	8001458 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd ffb3 	bl	8001458 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e009      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x4a8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x47a>
 800350c:	e001      	b.n	8003512 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
 8003524:	42470060 	.word	0x42470060

08003528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01d      	b.n	8003576 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fc7c 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f000 fa22 	bl	80039b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d007      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d122      	bne.n	8003622 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d11b      	bne.n	8003622 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0202 	mvn.w	r2, #2
 80035f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f9b2 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 800360e:	e005      	b.n	800361c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9a4 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9b5 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d122      	bne.n	8003676 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d11b      	bne.n	8003676 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f06f 0204 	mvn.w	r2, #4
 8003646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f988 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 8003662:	e005      	b.n	8003670 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f97a 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f98b 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b08      	cmp	r3, #8
 8003682:	d122      	bne.n	80036ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b08      	cmp	r3, #8
 8003690:	d11b      	bne.n	80036ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0208 	mvn.w	r2, #8
 800369a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f95e 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 80036b6:	e005      	b.n	80036c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f950 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f961 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d122      	bne.n	800371e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d11b      	bne.n	800371e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f06f 0210 	mvn.w	r2, #16
 80036ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2208      	movs	r2, #8
 80036f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f934 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 800370a:	e005      	b.n	8003718 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f926 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f937 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10e      	bne.n	800374a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0201 	mvn.w	r2, #1
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 fe6d 	bl	8005424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d10e      	bne.n	8003776 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d107      	bne.n	8003776 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fadd 	bl	8003d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d10e      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d107      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800379a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8fc 	bl	800399a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0220 	mvn.w	r2, #32
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 faa7 	bl	8003d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_ConfigClockSource+0x18>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0b3      	b.n	8003956 <HAL_TIM_ConfigClockSource+0x180>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800380c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003814:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003826:	d03e      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xd0>
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	f200 8087 	bhi.w	800393e <HAL_TIM_ConfigClockSource+0x168>
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	f000 8085 	beq.w	8003942 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d87f      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 800383e:	2b70      	cmp	r3, #112	; 0x70
 8003840:	d01a      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xa2>
 8003842:	2b70      	cmp	r3, #112	; 0x70
 8003844:	d87b      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 8003846:	2b60      	cmp	r3, #96	; 0x60
 8003848:	d050      	beq.n	80038ec <HAL_TIM_ConfigClockSource+0x116>
 800384a:	2b60      	cmp	r3, #96	; 0x60
 800384c:	d877      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 800384e:	2b50      	cmp	r3, #80	; 0x50
 8003850:	d03c      	beq.n	80038cc <HAL_TIM_ConfigClockSource+0xf6>
 8003852:	2b50      	cmp	r3, #80	; 0x50
 8003854:	d873      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d058      	beq.n	800390c <HAL_TIM_ConfigClockSource+0x136>
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d86f      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 800385e:	2b30      	cmp	r3, #48	; 0x30
 8003860:	d064      	beq.n	800392c <HAL_TIM_ConfigClockSource+0x156>
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d86b      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 8003866:	2b20      	cmp	r3, #32
 8003868:	d060      	beq.n	800392c <HAL_TIM_ConfigClockSource+0x156>
 800386a:	2b20      	cmp	r3, #32
 800386c:	d867      	bhi.n	800393e <HAL_TIM_ConfigClockSource+0x168>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d05c      	beq.n	800392c <HAL_TIM_ConfigClockSource+0x156>
 8003872:	2b10      	cmp	r3, #16
 8003874:	d05a      	beq.n	800392c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003876:	e062      	b.n	800393e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 f9ac 	bl	8003be4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800389a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
      break;
 80038a4:	e04e      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 f995 	bl	8003be4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c8:	609a      	str	r2, [r3, #8]
      break;
 80038ca:	e03b      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	461a      	mov	r2, r3
 80038da:	f000 f909 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2150      	movs	r1, #80	; 0x50
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f962 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 80038ea:	e02b      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f000 f928 	bl	8003b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2160      	movs	r1, #96	; 0x60
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f952 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 800390a:	e01b      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	461a      	mov	r2, r3
 800391a:	f000 f8e9 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f942 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 800392a:	e00b      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 f939 	bl	8003bae <TIM_ITRx_SetConfig>
      break;
 800393c:	e002      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a40      	ldr	r2, [pc, #256]	; (8003ac4 <TIM_Base_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d013      	beq.n	80039f0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d00f      	beq.n	80039f0 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3d      	ldr	r2, [pc, #244]	; (8003ac8 <TIM_Base_SetConfig+0x118>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3c      	ldr	r2, [pc, #240]	; (8003acc <TIM_Base_SetConfig+0x11c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a3b      	ldr	r2, [pc, #236]	; (8003ad0 <TIM_Base_SetConfig+0x120>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a3a      	ldr	r2, [pc, #232]	; (8003ad4 <TIM_Base_SetConfig+0x124>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d108      	bne.n	8003a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <TIM_Base_SetConfig+0x114>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02b      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d027      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <TIM_Base_SetConfig+0x118>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d023      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <TIM_Base_SetConfig+0x11c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <TIM_Base_SetConfig+0x120>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01b      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <TIM_Base_SetConfig+0x124>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d017      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a28      	ldr	r2, [pc, #160]	; (8003ad8 <TIM_Base_SetConfig+0x128>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <TIM_Base_SetConfig+0x12c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <TIM_Base_SetConfig+0x130>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <TIM_Base_SetConfig+0x134>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <TIM_Base_SetConfig+0x138>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <TIM_Base_SetConfig+0x13c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <TIM_Base_SetConfig+0x114>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0xf8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <TIM_Base_SetConfig+0x124>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40010400 	.word	0x40010400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800
 8003ae4:	40001800 	.word	0x40001800
 8003ae8:	40001c00 	.word	0x40001c00
 8003aec:	40002000 	.word	0x40002000

08003af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 030a 	bic.w	r3, r3, #10
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0210 	bic.w	r2, r3, #16
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	031b      	lsls	r3, r3, #12
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f043 0307 	orr.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e05a      	b.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d01d      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40001800 	.word	0x40001800

08003d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e03f      	b.n	8003dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd f94e 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fc6d 	bl	8004668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b088      	sub	sp, #32
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	f040 8083 	bne.w	8003f06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_UART_Transmit+0x2e>
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e07b      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Transmit+0x40>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e074      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e34:	f7fd fb10 	bl	8001458 <HAL_GetTick>
 8003e38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e4e:	e042      	b.n	8003ed6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d122      	bne.n	8003eae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa76 	bl	8004364 <UART_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e042      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	e017      	b.n	8003ed6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	e013      	b.n	8003ed6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fa53 	bl	8004364 <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e01f      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	60ba      	str	r2, [r7, #8]
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1b7      	bne.n	8003e50 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2140      	movs	r1, #64	; 0x40
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa3a 	bl	8004364 <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e006      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d166      	bne.n	8003ff8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_Receive_DMA+0x26>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e05f      	b.n	8003ffa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Receive_DMA+0x38>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e058      	b.n	8003ffa <HAL_UART_Receive_DMA+0xea>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2222      	movs	r2, #34	; 0x22
 8003f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <HAL_UART_Receive_DMA+0xf4>)
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	4a24      	ldr	r2, [pc, #144]	; (8004008 <HAL_UART_Receive_DMA+0xf8>)
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_UART_Receive_DMA+0xfc>)
 8003f80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	2200      	movs	r2, #0
 8003f88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	f7fe f84d 	bl	8002040 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	0800424d 	.word	0x0800424d
 8004008:	080042b5 	.word	0x080042b5
 800400c:	080042d1 	.word	0x080042d1

08004010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_UART_IRQHandler+0x52>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa82 	bl	8004564 <UART_Receive_IT>
      return;
 8004060:	e0d0      	b.n	8004204 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80b0 	beq.w	80041ca <HAL_UART_IRQHandler+0x1ba>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <HAL_UART_IRQHandler+0x70>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a5 	beq.w	80041ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_UART_IRQHandler+0x90>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_UART_IRQHandler+0xb0>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	f043 0202 	orr.w	r2, r3, #2
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_UART_IRQHandler+0xd0>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <HAL_UART_IRQHandler+0xfa>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_UART_IRQHandler+0xee>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	f043 0208 	orr.w	r2, r3, #8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d077      	beq.n	8004202 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_UART_IRQHandler+0x11c>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa1c 	bl	8004564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_UART_IRQHandler+0x144>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d031      	beq.n	80041b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f965 	bl	8004424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d123      	bne.n	80041b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004176:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_UART_IRQHandler+0x1fc>)
 8004186:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd ffaf 	bl	80020f0 <HAL_DMA_Abort_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a2:	4610      	mov	r0, r2
 80041a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a6:	e00e      	b.n	80041c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f845 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ae:	e00a      	b.n	80041c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f841 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b6:	e006      	b.n	80041c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f83d 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041c4:	e01d      	b.n	8004202 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c6:	bf00      	nop
    return;
 80041c8:	e01b      	b.n	8004202 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_UART_IRQHandler+0x1d6>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f952 	bl	8004488 <UART_Transmit_IT>
    return;
 80041e4:	e00e      	b.n	8004204 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <HAL_UART_IRQHandler+0x1f4>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f99a 	bl	8004534 <UART_EndTransmit_IT>
    return;
 8004200:	e000      	b.n	8004204 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004202:	bf00      	nop
  }
}
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	08004461 	.word	0x08004461

08004210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11e      	bne.n	80042a6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fe14 	bl	8004ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff ffae 	bl	8004224 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b21      	cmp	r3, #33	; 0x21
 8004302:	d108      	bne.n	8004316 <UART_DMAError+0x46>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f000 f871 	bl	80043f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b22      	cmp	r3, #34	; 0x22
 8004336:	d108      	bne.n	800434a <UART_DMAError+0x7a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004344:	68b8      	ldr	r0, [r7, #8]
 8004346:	f000 f86d 	bl	8004424 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f7ff ff6e 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004374:	e02c      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d028      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x30>
 8004384:	f7fd f868 	bl	8001458 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d21d      	bcs.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00f      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d0c3      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800440e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800443a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff fedc 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b21      	cmp	r3, #33	; 0x21
 800449a:	d144      	bne.n	8004526 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a4:	d11a      	bne.n	80044dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	e00e      	b.n	80044ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]
 80044da:	e008      	b.n	80044ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6211      	str	r1, [r2, #32]
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4619      	mov	r1, r3
 80044fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fe5b 	bl	8004210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b22      	cmp	r3, #34	; 0x22
 8004576:	d171      	bne.n	800465c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d123      	bne.n	80045ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10e      	bne.n	80045ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
 80045ac:	e029      	b.n	8004602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
 80045c8:	e01b      	b.n	8004602 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6858      	ldr	r0, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	1c59      	adds	r1, r3, #1
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6291      	str	r1, [r2, #40]	; 0x28
 80045e2:	b2c2      	uxtb	r2, r0
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e00c      	b.n	8004602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	1c58      	adds	r0, r3, #1
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	6288      	str	r0, [r1, #40]	; 0x28
 80045fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4619      	mov	r1, r3
 8004610:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004612:	2b00      	cmp	r3, #0
 8004614:	d120      	bne.n	8004658 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0220 	bic.w	r2, r2, #32
 8004624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fc40 	bl	8004ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e002      	b.n	800465e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b0bd      	sub	sp, #244	; 0xf4
 800466e:	af00      	add	r7, sp, #0
 8004670:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	ea40 0301 	orr.w	r3, r0, r1
 8004690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80046b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046c0:	f021 010c 	bic.w	r1, r1, #12
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046ce:	430b      	orrs	r3, r1
 80046d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	6999      	ldr	r1, [r3, #24]
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	ea40 0301 	orr.w	r3, r0, r1
 80046ee:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	f040 81a5 	bne.w	8004a48 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4bcd      	ldr	r3, [pc, #820]	; (8004a3c <UART_SetConfig+0x3d4>)
 8004706:	429a      	cmp	r2, r3
 8004708:	d006      	beq.n	8004718 <UART_SetConfig+0xb0>
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4bcb      	ldr	r3, [pc, #812]	; (8004a40 <UART_SetConfig+0x3d8>)
 8004712:	429a      	cmp	r2, r3
 8004714:	f040 80cb 	bne.w	80048ae <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fe fae6 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 800471c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004724:	461c      	mov	r4, r3
 8004726:	f04f 0500 	mov.w	r5, #0
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	1891      	adds	r1, r2, r2
 8004730:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004734:	415b      	adcs	r3, r3
 8004736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800473a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800473e:	1912      	adds	r2, r2, r4
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	00d9      	lsls	r1, r3, #3
 800474e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004752:	00d0      	lsls	r0, r2, #3
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	1911      	adds	r1, r2, r4
 800475a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800475e:	416b      	adcs	r3, r5
 8004760:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	1891      	adds	r1, r2, r2
 8004772:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004776:	415b      	adcs	r3, r3
 8004778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800477c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004780:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004784:	f7fb fd3e 	bl	8000204 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4bad      	ldr	r3, [pc, #692]	; (8004a44 <UART_SetConfig+0x3dc>)
 800478e:	fba3 2302 	umull	r2, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	011e      	lsls	r6, r3, #4
 8004796:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800479a:	461c      	mov	r4, r3
 800479c:	f04f 0500 	mov.w	r5, #0
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	67b9      	str	r1, [r7, #120]	; 0x78
 80047a8:	415b      	adcs	r3, r3
 80047aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80047b0:	1912      	adds	r2, r2, r4
 80047b2:	eb45 0303 	adc.w	r3, r5, r3
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	00d9      	lsls	r1, r3, #3
 80047c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c4:	00d0      	lsls	r0, r2, #3
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	1911      	adds	r1, r2, r4
 80047cc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80047d0:	416b      	adcs	r3, r5
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	1891      	adds	r1, r2, r2
 80047e4:	6739      	str	r1, [r7, #112]	; 0x70
 80047e6:	415b      	adcs	r3, r3
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
 80047ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80047ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80047f2:	f7fb fd07 	bl	8000204 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <UART_SetConfig+0x3dc>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	; 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a8d      	ldr	r2, [pc, #564]	; (8004a44 <UART_SetConfig+0x3dc>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800481c:	441e      	add	r6, r3
 800481e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004822:	4618      	mov	r0, r3
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	1894      	adds	r4, r2, r2
 800482e:	66bc      	str	r4, [r7, #104]	; 0x68
 8004830:	415b      	adcs	r3, r3
 8004832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004834:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004838:	1812      	adds	r2, r2, r0
 800483a:	eb41 0303 	adc.w	r3, r1, r3
 800483e:	f04f 0400 	mov.w	r4, #0
 8004842:	f04f 0500 	mov.w	r5, #0
 8004846:	00dd      	lsls	r5, r3, #3
 8004848:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800484c:	00d4      	lsls	r4, r2, #3
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	1814      	adds	r4, r2, r0
 8004854:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004858:	414b      	adcs	r3, r1
 800485a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	461a      	mov	r2, r3
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	1891      	adds	r1, r2, r2
 800486c:	6639      	str	r1, [r7, #96]	; 0x60
 800486e:	415b      	adcs	r3, r3
 8004870:	667b      	str	r3, [r7, #100]	; 0x64
 8004872:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800487a:	f7fb fcc3 	bl	8000204 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <UART_SetConfig+0x3dc>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a6b      	ldr	r2, [pc, #428]	; (8004a44 <UART_SetConfig+0x3dc>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4432      	add	r2, r6
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e26d      	b.n	8004d8a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7fe fa07 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80048b2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048ba:	461c      	mov	r4, r3
 80048bc:	f04f 0500 	mov.w	r5, #0
 80048c0:	4622      	mov	r2, r4
 80048c2:	462b      	mov	r3, r5
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80048c8:	415b      	adcs	r3, r3
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048d0:	1912      	adds	r2, r2, r4
 80048d2:	eb45 0303 	adc.w	r3, r5, r3
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	00d9      	lsls	r1, r3, #3
 80048e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e4:	00d0      	lsls	r0, r2, #3
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	1911      	adds	r1, r2, r4
 80048ec:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80048f0:	416b      	adcs	r3, r5
 80048f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	1891      	adds	r1, r2, r2
 8004904:	6539      	str	r1, [r7, #80]	; 0x50
 8004906:	415b      	adcs	r3, r3
 8004908:	657b      	str	r3, [r7, #84]	; 0x54
 800490a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800490e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004912:	f7fb fc77 	bl	8000204 <__aeabi_uldivmod>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <UART_SetConfig+0x3dc>)
 800491c:	fba3 2302 	umull	r2, r3, r3, r2
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	011e      	lsls	r6, r3, #4
 8004924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004928:	461c      	mov	r4, r3
 800492a:	f04f 0500 	mov.w	r5, #0
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	1891      	adds	r1, r2, r2
 8004934:	64b9      	str	r1, [r7, #72]	; 0x48
 8004936:	415b      	adcs	r3, r3
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800493a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800493e:	1912      	adds	r2, r2, r4
 8004940:	eb45 0303 	adc.w	r3, r5, r3
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	00d9      	lsls	r1, r3, #3
 800494e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004952:	00d0      	lsls	r0, r2, #3
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	1911      	adds	r1, r2, r4
 800495a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800495e:	416b      	adcs	r3, r5
 8004960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	1891      	adds	r1, r2, r2
 8004972:	6439      	str	r1, [r7, #64]	; 0x40
 8004974:	415b      	adcs	r3, r3
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
 8004978:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800497c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004980:	f7fb fc40 	bl	8000204 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <UART_SetConfig+0x3dc>)
 800498a:	fba3 1302 	umull	r1, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2164      	movs	r1, #100	; 0x64
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	3332      	adds	r3, #50	; 0x32
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <UART_SetConfig+0x3dc>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049aa:	441e      	add	r6, r3
 80049ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	1894      	adds	r4, r2, r2
 80049bc:	63bc      	str	r4, [r7, #56]	; 0x38
 80049be:	415b      	adcs	r3, r3
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049c6:	1812      	adds	r2, r2, r0
 80049c8:	eb41 0303 	adc.w	r3, r1, r3
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	f04f 0500 	mov.w	r5, #0
 80049d4:	00dd      	lsls	r5, r3, #3
 80049d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049da:	00d4      	lsls	r4, r2, #3
 80049dc:	4622      	mov	r2, r4
 80049de:	462b      	mov	r3, r5
 80049e0:	1814      	adds	r4, r2, r0
 80049e2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80049e6:	414b      	adcs	r3, r1
 80049e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	6339      	str	r1, [r7, #48]	; 0x30
 80049fc:	415b      	adcs	r3, r3
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a04:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a08:	f7fb fbfc 	bl	8000204 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <UART_SetConfig+0x3dc>)
 8004a12:	fba3 1302 	umull	r1, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	3332      	adds	r3, #50	; 0x32
 8004a24:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <UART_SetConfig+0x3dc>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 0207 	and.w	r2, r3, #7
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4432      	add	r2, r6
 8004a38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a3a:	e1a6      	b.n	8004d8a <UART_SetConfig+0x722>
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	40011400 	.word	0x40011400
 8004a44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4bd1      	ldr	r3, [pc, #836]	; (8004d94 <UART_SetConfig+0x72c>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d006      	beq.n	8004a62 <UART_SetConfig+0x3fa>
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4bcf      	ldr	r3, [pc, #828]	; (8004d98 <UART_SetConfig+0x730>)
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	f040 80ca 	bne.w	8004bf6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a62:	f7fe f941 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004a66:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a6e:	461c      	mov	r4, r3
 8004a70:	f04f 0500 	mov.w	r5, #0
 8004a74:	4622      	mov	r2, r4
 8004a76:	462b      	mov	r3, r5
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a84:	1912      	adds	r2, r2, r4
 8004a86:	eb45 0303 	adc.w	r3, r5, r3
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	00d9      	lsls	r1, r3, #3
 8004a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a98:	00d0      	lsls	r0, r2, #3
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	eb12 0a04 	adds.w	sl, r2, r4
 8004aa2:	eb43 0b05 	adc.w	fp, r3, r5
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ac0:	0082      	lsls	r2, r0, #2
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	f7fb fb9d 	bl	8000204 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4bb3      	ldr	r3, [pc, #716]	; (8004d9c <UART_SetConfig+0x734>)
 8004ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	011e      	lsls	r6, r3, #4
 8004ad8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004adc:	4618      	mov	r0, r3
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	1894      	adds	r4, r2, r2
 8004ae8:	623c      	str	r4, [r7, #32]
 8004aea:	415b      	adcs	r3, r3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af2:	1812      	adds	r2, r2, r0
 8004af4:	eb41 0303 	adc.w	r3, r1, r3
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	f04f 0500 	mov.w	r5, #0
 8004b00:	00dd      	lsls	r5, r3, #3
 8004b02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b06:	00d4      	lsls	r4, r2, #3
 8004b08:	4622      	mov	r2, r4
 8004b0a:	462b      	mov	r3, r5
 8004b0c:	1814      	adds	r4, r2, r0
 8004b0e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004b12:	414b      	adcs	r3, r1
 8004b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	008b      	lsls	r3, r1, #2
 8004b2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b32:	0082      	lsls	r2, r0, #2
 8004b34:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004b38:	f7fb fb64 	bl	8000204 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4b96      	ldr	r3, [pc, #600]	; (8004d9c <UART_SetConfig+0x734>)
 8004b42:	fba3 1302 	umull	r1, r3, r3, r2
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2164      	movs	r1, #100	; 0x64
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	3332      	adds	r3, #50	; 0x32
 8004b54:	4a91      	ldr	r2, [pc, #580]	; (8004d9c <UART_SetConfig+0x734>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b60:	441e      	add	r6, r3
 8004b62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b66:	4618      	mov	r0, r3
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	1894      	adds	r4, r2, r2
 8004b72:	61bc      	str	r4, [r7, #24]
 8004b74:	415b      	adcs	r3, r3
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7c:	1812      	adds	r2, r2, r0
 8004b7e:	eb41 0303 	adc.w	r3, r1, r3
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	f04f 0500 	mov.w	r5, #0
 8004b8a:	00dd      	lsls	r5, r3, #3
 8004b8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b90:	00d4      	lsls	r4, r2, #3
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	1814      	adds	r4, r2, r0
 8004b98:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004b9c:	414b      	adcs	r3, r1
 8004b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bbc:	0082      	lsls	r2, r0, #2
 8004bbe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004bc2:	f7fb fb1f 	bl	8000204 <__aeabi_uldivmod>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4b74      	ldr	r3, [pc, #464]	; (8004d9c <UART_SetConfig+0x734>)
 8004bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	2164      	movs	r1, #100	; 0x64
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	3332      	adds	r3, #50	; 0x32
 8004bde:	4a6f      	ldr	r2, [pc, #444]	; (8004d9c <UART_SetConfig+0x734>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4432      	add	r2, r6
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	e0c9      	b.n	8004d8a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7fe f863 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004bfa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c02:	461c      	mov	r4, r3
 8004c04:	f04f 0500 	mov.w	r5, #0
 8004c08:	4622      	mov	r2, r4
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	6139      	str	r1, [r7, #16]
 8004c10:	415b      	adcs	r3, r3
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c18:	1912      	adds	r2, r2, r4
 8004c1a:	eb45 0303 	adc.w	r3, r5, r3
 8004c1e:	f04f 0000 	mov.w	r0, #0
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	00d9      	lsls	r1, r3, #3
 8004c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2c:	00d0      	lsls	r0, r2, #3
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	eb12 0804 	adds.w	r8, r2, r4
 8004c36:	eb43 0905 	adc.w	r9, r3, r5
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c54:	0082      	lsls	r2, r0, #2
 8004c56:	4640      	mov	r0, r8
 8004c58:	4649      	mov	r1, r9
 8004c5a:	f7fb fad3 	bl	8000204 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b4e      	ldr	r3, [pc, #312]	; (8004d9c <UART_SetConfig+0x734>)
 8004c64:	fba3 2302 	umull	r2, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	011e      	lsls	r6, r3, #4
 8004c6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	1894      	adds	r4, r2, r2
 8004c7c:	60bc      	str	r4, [r7, #8]
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c86:	1812      	adds	r2, r2, r0
 8004c88:	eb41 0303 	adc.w	r3, r1, r3
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	f04f 0500 	mov.w	r5, #0
 8004c94:	00dd      	lsls	r5, r3, #3
 8004c96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c9a:	00d4      	lsls	r4, r2, #3
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	1814      	adds	r4, r2, r0
 8004ca2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004ca6:	414b      	adcs	r3, r1
 8004ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	008b      	lsls	r3, r1, #2
 8004cc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cc6:	0082      	lsls	r2, r0, #2
 8004cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ccc:	f7fb fa9a 	bl	8000204 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <UART_SetConfig+0x734>)
 8004cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2164      	movs	r1, #100	; 0x64
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	3332      	adds	r3, #50	; 0x32
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <UART_SetConfig+0x734>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	441e      	add	r6, r3
 8004cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	1894      	adds	r4, r2, r2
 8004d06:	603c      	str	r4, [r7, #0]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d10:	1812      	adds	r2, r2, r0
 8004d12:	eb41 0303 	adc.w	r3, r1, r3
 8004d16:	f04f 0400 	mov.w	r4, #0
 8004d1a:	f04f 0500 	mov.w	r5, #0
 8004d1e:	00dd      	lsls	r5, r3, #3
 8004d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d24:	00d4      	lsls	r4, r2, #3
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	1814      	adds	r4, r2, r0
 8004d2c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d30:	414b      	adcs	r3, r1
 8004d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d50:	0082      	lsls	r2, r0, #2
 8004d52:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004d56:	f7fb fa55 	bl	8000204 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <UART_SetConfig+0x734>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <UART_SetConfig+0x734>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4432      	add	r2, r6
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	e7ff      	b.n	8004d8a <UART_SetConfig+0x722>
 8004d8a:	bf00      	nop
 8004d8c:	37f4      	adds	r7, #244	; 0xf4
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <hydrogreen_init>:
/**
* @fn hydrogreen_init(void)
* @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static void hydrogreen_init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  watchdog_init();
 8004da4:	f000 fb62 	bl	800546c <watchdog_init>
  timers_init();
 8004da8:	f000 fa64 	bl	8005274 <timers_init>
  //rs485_init_SW();
  rs485_init_EF();
 8004dac:	f000 f83c 	bl	8004e28 <rs485_init_EF>
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <hydrogreen_step1kHz>:
/**
* @fn hydrogreen_step1kHz(void)
* @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step1kHz(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif


  watchdog_step();
 8004db8:	f000 fb8a 	bl	80054d0 <watchdog_step>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <hydrogreen_step10kHz>:
/**
* @fn hydrogreen_step(void)
* @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step10kHz(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  //rs485_step_SW();
  rs485_step_EF();
 8004dc4:	f000 f840 	bl	8004e48 <rs485_step_EF>
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <hydrogreen_main>:
/**
* @fn hydrogreen_main(void)
* @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
*/
void hydrogreen_main(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  hydrogreen_init();
 8004dd0:	f7ff ffe6 	bl	8004da0 <hydrogreen_init>

  while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <hydrogreen_main+0x3c>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 8004dde:	f000 faa7 	bl	8005330 <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 8004de2:	f7ff ffe7 	bl	8004db4 <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 8004de6:	f000 faaf 	bl	8005348 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <hydrogreen_main+0x3c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <hydrogreen_main+0x40>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0ec      	beq.n	8004dd4 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 8004dfa:	f7ff ffe1 	bl	8004dc0 <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 8004dfe:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <hydrogreen_main+0x40>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 8004e04:	e7e6      	b.n	8004dd4 <hydrogreen_main+0x8>
 8004e06:	bf00      	nop
 8004e08:	2000048c 	.word	0x2000048c
 8004e0c:	20000488 	.word	0x20000488

08004e10 <hydrogreen_hardFault>:
/**
* @fn hydrogreen_hardFault(void)
* @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
*/
void hydrogreen_hardFault(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, Horn_Pin, GPIO_PIN_SET);
 8004e14:	2201      	movs	r2, #1
 8004e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e1a:	4802      	ldr	r0, [pc, #8]	; (8004e24 <hydrogreen_hardFault+0x14>)
 8004e1c:	f7fd fd88 	bl	8002930 <HAL_GPIO_WritePin>

}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40020400 	.word	0x40020400

08004e28 <rs485_init_EF>:
{
  HAL_UART_Receive_DMA(&UART_PORT_RS485_SW, &RS485_BUFF_SW.rx, 3);				//Rozpocznij nasluchiwanie
  prepareNewDataToSend_SW();												//Przygotuj nowy pakiet danych
}
void rs485_init_EF(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485_EF, &RS485_BUFF_EF.rx, 1);				//Rozpocznij nasluchiwanie
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4904      	ldr	r1, [pc, #16]	; (8004e40 <rs485_init_EF+0x18>)
 8004e30:	4804      	ldr	r0, [pc, #16]	; (8004e44 <rs485_init_EF+0x1c>)
 8004e32:	f7ff f86d 	bl	8003f10 <HAL_UART_Receive_DMA>
  prepareNewDataToSend_EF();												//Przygotuj nowy pakiet danych
 8004e36:	f000 f913 	bl	8005060 <prepareNewDataToSend_EF>
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000061 	.word	0x20000061
 8004e44:	2000035c 	.word	0x2000035c

08004e48 <rs485_step_EF>:
{
  receiveData_SW();
  sendData_SW();
}
void rs485_step_EF(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  receiveData_EF();
 8004e4c:	f000 f89e 	bl	8004f8c <receiveData_EF>
  sendData_EF();
 8004e50:	f000 f802 	bl	8004e58 <sendData_EF>
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <sendData_EF>:
/**
* @fn sendData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii TX, powinna zostac umieszczona w wewnatrz rs485_step() dla przeplywu energii
*/
static void sendData_EF(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  static uint16_t cntEndOfTxTick_EF;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy wyslano cala ramke danych
  if (posInTxTab_EF < TX_FRAME_LENGHT_EF)
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <sendData_EF+0x68>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d818      	bhi.n	8004e96 <sendData_EF+0x3e>
    {
      //Nie, wysylaj dalej
      RS485_BUFF_EF.tx = dataToTx_EF[posInTxTab_EF];
 8004e64:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <sendData_EF+0x68>)
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <sendData_EF+0x6c>)
 8004e6c:	5c9a      	ldrb	r2, [r3, r2]
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <sendData_EF+0x70>)
 8004e70:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e72:	b672      	cpsid	i
}
 8004e74:	bf00      	nop

      //Na czas wysylania danych wylacz przerwania
      __disable_irq();
      HAL_UART_Transmit(&UART_PORT_RS485_SW, &RS485_BUFF_EF.tx, 1, HAL_MAX_DELAY);
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	4912      	ldr	r1, [pc, #72]	; (8004ec8 <sendData_EF+0x70>)
 8004e7e:	4813      	ldr	r0, [pc, #76]	; (8004ecc <sendData_EF+0x74>)
 8004e80:	f7fe ffad 	bl	8003dde <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8004e84:	b662      	cpsie	i
}
 8004e86:	bf00      	nop
      __enable_irq();

      posInTxTab_EF++;
 8004e88:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <sendData_EF+0x68>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <sendData_EF+0x68>)
 8004e92:	801a      	strh	r2, [r3, #0]
      cntEndOfTxTick_EF = 0;
      posInTxTab_EF = 0;

      prepareNewDataToSend_EF();
    }
}
 8004e94:	e012      	b.n	8004ebc <sendData_EF+0x64>
  else if (cntEndOfTxTick_EF < TX_FRAME_LENGHT_EF)
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <sendData_EF+0x78>)
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d806      	bhi.n	8004eac <sendData_EF+0x54>
      cntEndOfTxTick_EF++;
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <sendData_EF+0x78>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <sendData_EF+0x78>)
 8004ea8:	801a      	strh	r2, [r3, #0]
}
 8004eaa:	e007      	b.n	8004ebc <sendData_EF+0x64>
      cntEndOfTxTick_EF = 0;
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <sendData_EF+0x78>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	801a      	strh	r2, [r3, #0]
      posInTxTab_EF = 0;
 8004eb2:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <sendData_EF+0x68>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	801a      	strh	r2, [r3, #0]
      prepareNewDataToSend_EF();
 8004eb8:	f000 f8d2 	bl	8005060 <prepareNewDataToSend_EF>
}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	2000005a 	.word	0x2000005a
 8004ec4:	20000054 	.word	0x20000054
 8004ec8:	20000060 	.word	0x20000060
 8004ecc:	200002bc 	.word	0x200002bc
 8004ed0:	20000062 	.word	0x20000062

08004ed4 <HAL_UART_RxCpltCallback>:
      __enable_irq();
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	//dopisac warunek ktory uart
  HAL_UART_Receive_DMA(&UART_PORT_RS485_SW, &RS485_BUFF_SW.rx, 3);			//Ponownie rozpocznij nasluchiwanie nasluchiwanie
 8004edc:	2203      	movs	r2, #3
 8004ede:	4920      	ldr	r1, [pc, #128]	; (8004f60 <HAL_UART_RxCpltCallback+0x8c>)
 8004ee0:	4820      	ldr	r0, [pc, #128]	; (8004f64 <HAL_UART_RxCpltCallback+0x90>)
 8004ee2:	f7ff f815 	bl	8003f10 <HAL_UART_Receive_DMA>

  intRxCplt_SW = 1;								//Ustaw flage informujaca o otrzymaniu nowych danych
 8004ee6:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <HAL_UART_RxCpltCallback+0x94>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	701a      	strb	r2, [r3, #0]

  if (posInRxTab_SW > RX_FRAME_LENGHT_SW) posInRxTab_SW = 0;				//Zabezpieczenie przed wyjsciem poza zakres tablicy
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <HAL_UART_RxCpltCallback+0x98>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b0b      	cmp	r3, #11
 8004ef4:	d902      	bls.n	8004efc <HAL_UART_RxCpltCallback+0x28>
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_UART_RxCpltCallback+0x98>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	801a      	strh	r2, [r3, #0]

  dataFromRx_SW[posInRxTab_SW] = RS485_BUFF_SW.rx;					//Przypisz otrzymany bajt do analizowanej tablicy
 8004efc:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <HAL_UART_RxCpltCallback+0x98>)
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_UART_RxCpltCallback+0x9c>)
 8004f06:	7859      	ldrb	r1, [r3, #1]
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <HAL_UART_RxCpltCallback+0xa0>)
 8004f0a:	5499      	strb	r1, [r3, r2]
  posInRxTab_SW++;
 8004f0c:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_UART_RxCpltCallback+0x98>)
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <HAL_UART_RxCpltCallback+0x98>)
 8004f18:	801a      	strh	r2, [r3, #0]

  HAL_UART_Receive_DMA(&UART_PORT_RS485_SW, &RS485_BUFF_EF.rx, 1);			//Ponownie rozpocznij nasluchiwanie nasluchiwanie
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_UART_RxCpltCallback+0xa4>)
 8004f1e:	4811      	ldr	r0, [pc, #68]	; (8004f64 <HAL_UART_RxCpltCallback+0x90>)
 8004f20:	f7fe fff6 	bl	8003f10 <HAL_UART_Receive_DMA>

  intRxCplt_EF = 1;								//Ustaw flage informujaca o otrzymaniu nowych danych
 8004f24:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <HAL_UART_RxCpltCallback+0xa8>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]

  if (posInRxTab_EF > RX_FRAME_LENGHT_EF) posInRxTab_EF = 0;				//Zabezpieczenie przed wyjsciem poza zakres tablicy
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b15      	cmp	r3, #21
 8004f32:	d902      	bls.n	8004f3a <HAL_UART_RxCpltCallback+0x66>
 8004f34:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	801a      	strh	r2, [r3, #0]

  dataFromRx_EF[posInRxTab_EF] = RS485_BUFF_EF.rx;					//Przypisz otrzymany bajt do analizowanej tablicy
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_UART_RxCpltCallback+0xb0>)
 8004f44:	7859      	ldrb	r1, [r3, #1]
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_UART_RxCpltCallback+0xb4>)
 8004f48:	5499      	strb	r1, [r3, r2]
  posInRxTab_EF++;
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f56:	801a      	strh	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	2000005d 	.word	0x2000005d
 8004f64:	200002bc 	.word	0x200002bc
 8004f68:	20000036 	.word	0x20000036
 8004f6c:	20000034 	.word	0x20000034
 8004f70:	2000005c 	.word	0x2000005c
 8004f74:	20000028 	.word	0x20000028
 8004f78:	20000061 	.word	0x20000061
 8004f7c:	20000050 	.word	0x20000050
 8004f80:	2000004e 	.word	0x2000004e
 8004f84:	20000060 	.word	0x20000060
 8004f88:	20000038 	.word	0x20000038

08004f8c <receiveData_EF>:
/**
* @fn receiveData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii RX, umiescic wewnatrz rs485_step() przeplywu energii
*/
static void receiveData_EF(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
  static uint32_t rejectedFramesInRow_EF;							//Zmienna przechowujaca liczbe straconych ramek z rzedu
  static uint32_t cntEndOfRxTick_EF;								//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy otrzymano nowe dane
  if (!intRxCplt_EF)
 8004f92:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <receiveData_EF+0xb8>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <receiveData_EF+0x1c>
    {
      //Nie otrzymano nowych danych, zacznij odliczac czas
      cntEndOfRxTick_EF++;
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <receiveData_EF+0xbc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <receiveData_EF+0xbc>)
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e007      	b.n	8004fb8 <receiveData_EF+0x2c>
    }
  else if (intRxCplt_EF)
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <receiveData_EF+0xb8>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <receiveData_EF+0x2c>
    {
      //Nowe dane zostaly otrzymane, zeruj flage informujaca o zakonczeniu transmisji
      intRxCplt_EF = 0;
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <receiveData_EF+0xb8>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
    }

  //Sprawdz czy minal juz czas wynoszacy RX_FRAME_LENGHT
  if (cntEndOfRxTick_EF > RX_FRAME_LENGHT_EF)
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <receiveData_EF+0xbc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b15      	cmp	r3, #21
 8004fbe:	d93c      	bls.n	800503a <receiveData_EF+0xae>
  __ASM volatile ("cpsid i" : : : "memory");
 8004fc0:	b672      	cpsid	i
}
 8004fc2:	bf00      	nop
    {
      //Na czas przetwarzania danych wylacz przerwania
      __disable_irq();

      //Czas minal, oznacza to koniec ramki
      cntEndOfRxTick_EF = 0;
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <receiveData_EF+0xbc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
      posInRxTab_EF = 0;
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <receiveData_EF+0xc0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	801a      	strh	r2, [r3, #0]

      //OBLICZ SUME KONTROLNA
      uint8_t crcSumOnMCU_EF = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataFromRx_EF, (RX_FRAME_LENGHT_EF - 2));
 8004fd0:	2213      	movs	r2, #19
 8004fd2:	491f      	ldr	r1, [pc, #124]	; (8005050 <receiveData_EF+0xc4>)
 8004fd4:	481f      	ldr	r0, [pc, #124]	; (8005054 <receiveData_EF+0xc8>)
 8004fd6:	f7fc ff52 	bl	8001e7e <HAL_CRC_Calculate>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71bb      	strb	r3, [r7, #6]

      //Sprawdz czy sumy kontrolne oraz bajt EOT (End Of Tranmission) sie zgadzaja
      if ( (dataFromRx_EF[RX_FRAME_LENGHT_EF - 2] == EOT_BYTE_EF) && (crcSumOnMCU_EF == dataFromRx_EF[RX_FRAME_LENGHT_EF - 1]) )
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <receiveData_EF+0xc4>)
 8004fe0:	7cdb      	ldrb	r3, [r3, #19]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b17      	cmp	r3, #23
 8004fe6:	d10e      	bne.n	8005006 <receiveData_EF+0x7a>
 8004fe8:	4b19      	ldr	r3, [pc, #100]	; (8005050 <receiveData_EF+0xc4>)
 8004fea:	7d1b      	ldrb	r3, [r3, #20]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	79ba      	ldrb	r2, [r7, #6]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d108      	bne.n	8005006 <receiveData_EF+0x7a>
	{
	  processReceivedData_EF();
 8004ff4:	f000 f862 	bl	80050bc <processReceivedData_EF>
	  rs485_flt_EF = RS485_FLT_NONE_EF;
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <receiveData_EF+0xcc>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
	  rejectedFramesInRow_EF = 0;
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <receiveData_EF+0xd0>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e00a      	b.n	800501c <receiveData_EF+0x90>
	}
      else
	{
	  //rejectedFramesInRow_EF++;
	  processReceivedData_EF();
 8005006:	f000 f859 	bl	80050bc <processReceivedData_EF>
	  //Jezeli odrzucono wiecej niz 50 ramek z rzedu uznaj ze tranmisja zostala zerwana
	  if (rejectedFramesInRow_EF > 50)
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <receiveData_EF+0xd0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b32      	cmp	r3, #50	; 0x32
 8005010:	d904      	bls.n	800501c <receiveData_EF+0x90>
	    {
	      resetActData_EF();
 8005012:	f000 f8db 	bl	80051cc <resetActData_EF>
	      rs485_flt_EF = RS485_NEW_DATA_TIMEOUT_EF;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <receiveData_EF+0xcc>)
 8005018:	2211      	movs	r2, #17
 800501a:	701a      	strb	r2, [r3, #0]
	    }
	}

      //Wyczysc bufor odbiorczy
      for (uint8_t i = 0; i < RX_FRAME_LENGHT_EF; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	71fb      	strb	r3, [r7, #7]
 8005020:	e006      	b.n	8005030 <receiveData_EF+0xa4>
	{
	  dataFromRx_EF[i] = 0x00;
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <receiveData_EF+0xc4>)
 8005026:	2100      	movs	r1, #0
 8005028:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < RX_FRAME_LENGHT_EF; i++)
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	3301      	adds	r3, #1
 800502e:	71fb      	strb	r3, [r7, #7]
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	2b14      	cmp	r3, #20
 8005034:	d9f5      	bls.n	8005022 <receiveData_EF+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8005036:	b662      	cpsie	i
}
 8005038:	bf00      	nop
	}

      __enable_irq();
    }
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000050 	.word	0x20000050
 8005048:	20000064 	.word	0x20000064
 800504c:	2000004e 	.word	0x2000004e
 8005050:	20000038 	.word	0x20000038
 8005054:	20000128 	.word	0x20000128
 8005058:	20000009 	.word	0x20000009
 800505c:	20000068 	.word	0x20000068

08005060 <prepareNewDataToSend_EF>:
/**
* @fn prepareNewDataToSend(void)
* @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void) dla przeplywu energii
*/
static void prepareNewDataToSend_EF(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
  uint8_t j = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	71fb      	strb	r3, [r7, #7]

    RS485_TX_DATA_EF.fuellCellModeButtons = 2;
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <prepareNewDataToSend_EF+0x4c>)
 800506c:	2202      	movs	r2, #2
 800506e:	701a      	strb	r2, [r3, #0]
    RS485_TX_DATA_EF.scOn = 3;
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <prepareNewDataToSend_EF+0x4c>)
 8005072:	2203      	movs	r2, #3
 8005074:	705a      	strb	r2, [r3, #1]
    RS485_TX_DATA_EF.emergencyScenario = 4;
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <prepareNewDataToSend_EF+0x4c>)
 8005078:	2204      	movs	r2, #4
 800507a:	709a      	strb	r2, [r3, #2]
    RS485_TX_DATA_EF.motorPWM = dataFromRx_EF[++j];
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	3301      	adds	r3, #1
 8005080:	71fb      	strb	r3, [r7, #7]
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <prepareNewDataToSend_EF+0x50>)
 8005086:	5cd3      	ldrb	r3, [r2, r3]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <prepareNewDataToSend_EF+0x4c>)
 800508c:	70da      	strb	r2, [r3, #3]

  //OBLICZ SUME KONTROLNA
  uint8_t calculatedCrcSumOnMCU_EF = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataToTx_EF, (TX_FRAME_LENGHT_EF - 2) );
 800508e:	2204      	movs	r2, #4
 8005090:	4908      	ldr	r1, [pc, #32]	; (80050b4 <prepareNewDataToSend_EF+0x54>)
 8005092:	4809      	ldr	r0, [pc, #36]	; (80050b8 <prepareNewDataToSend_EF+0x58>)
 8005094:	f7fc fef3 	bl	8001e7e <HAL_CRC_Calculate>
 8005098:	4603      	mov	r3, r0
 800509a:	71bb      	strb	r3, [r7, #6]

  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx_EF[TX_FRAME_LENGHT_EF - 1] = calculatedCrcSumOnMCU_EF;
 800509c:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <prepareNewDataToSend_EF+0x54>)
 800509e:	79bb      	ldrb	r3, [r7, #6]
 80050a0:	7153      	strb	r3, [r2, #5]
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000440 	.word	0x20000440
 80050b0:	20000038 	.word	0x20000038
 80050b4:	20000054 	.word	0x20000054
 80050b8:	20000128 	.word	0x20000128

080050bc <processReceivedData_EF>:
/**
* @fn processReveivedData_EF()
* @brief Funkcja przypisujaca odebrane dane do zmiennych docelowych dla przeplywu energii
*/
static void processReceivedData_EF(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	71fb      	strb	r3, [r7, #7]

  for(uint8_t k = 0; k < 4; k++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	71bb      	strb	r3, [r7, #6]
 80050ca:	e00c      	b.n	80050e6 <processReceivedData_EF+0x2a>
  {
  	RS485_RX_VERIFIED_DATA_EF.FC_V.array[k] = dataFromRx_EF[++i];
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	3301      	adds	r3, #1
 80050d0:	71fb      	strb	r3, [r7, #7]
 80050d2:	79fa      	ldrb	r2, [r7, #7]
 80050d4:	79bb      	ldrb	r3, [r7, #6]
 80050d6:	493a      	ldr	r1, [pc, #232]	; (80051c0 <processReceivedData_EF+0x104>)
 80050d8:	5c8a      	ldrb	r2, [r1, r2]
 80050da:	b2d1      	uxtb	r1, r2
 80050dc:	4a39      	ldr	r2, [pc, #228]	; (80051c4 <processReceivedData_EF+0x108>)
 80050de:	54d1      	strb	r1, [r2, r3]
  for(uint8_t k = 0; k < 4; k++)
 80050e0:	79bb      	ldrb	r3, [r7, #6]
 80050e2:	3301      	adds	r3, #1
 80050e4:	71bb      	strb	r3, [r7, #6]
 80050e6:	79bb      	ldrb	r3, [r7, #6]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d9ef      	bls.n	80050cc <processReceivedData_EF+0x10>
  }
  for(uint8_t k = 0; k < 4; k++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	717b      	strb	r3, [r7, #5]
 80050f0:	e00e      	b.n	8005110 <processReceivedData_EF+0x54>
  {
  	RS485_RX_VERIFIED_DATA_EF.FC_TEMP.array[k] = dataFromRx_EF[++i];
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	3301      	adds	r3, #1
 80050f6:	71fb      	strb	r3, [r7, #7]
 80050f8:	79fa      	ldrb	r2, [r7, #7]
 80050fa:	797b      	ldrb	r3, [r7, #5]
 80050fc:	4930      	ldr	r1, [pc, #192]	; (80051c0 <processReceivedData_EF+0x104>)
 80050fe:	5c8a      	ldrb	r2, [r1, r2]
 8005100:	b2d1      	uxtb	r1, r2
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <processReceivedData_EF+0x108>)
 8005104:	4413      	add	r3, r2
 8005106:	460a      	mov	r2, r1
 8005108:	711a      	strb	r2, [r3, #4]
  for(uint8_t k = 0; k < 4; k++)
 800510a:	797b      	ldrb	r3, [r7, #5]
 800510c:	3301      	adds	r3, #1
 800510e:	717b      	strb	r3, [r7, #5]
 8005110:	797b      	ldrb	r3, [r7, #5]
 8005112:	2b03      	cmp	r3, #3
 8005114:	d9ed      	bls.n	80050f2 <processReceivedData_EF+0x36>
  }
  for(uint8_t k = 0; k < 4; k++)
 8005116:	2300      	movs	r3, #0
 8005118:	713b      	strb	r3, [r7, #4]
 800511a:	e00e      	b.n	800513a <processReceivedData_EF+0x7e>
  {
  	RS485_RX_VERIFIED_DATA_EF.CURRENT_SENSOR_FC_TO_SC.array[k] = dataFromRx_EF[++i];
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	3301      	adds	r3, #1
 8005120:	71fb      	strb	r3, [r7, #7]
 8005122:	79fa      	ldrb	r2, [r7, #7]
 8005124:	793b      	ldrb	r3, [r7, #4]
 8005126:	4926      	ldr	r1, [pc, #152]	; (80051c0 <processReceivedData_EF+0x104>)
 8005128:	5c8a      	ldrb	r2, [r1, r2]
 800512a:	b2d1      	uxtb	r1, r2
 800512c:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <processReceivedData_EF+0x108>)
 800512e:	4413      	add	r3, r2
 8005130:	460a      	mov	r2, r1
 8005132:	721a      	strb	r2, [r3, #8]
  for(uint8_t k = 0; k < 4; k++)
 8005134:	793b      	ldrb	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	713b      	strb	r3, [r7, #4]
 800513a:	793b      	ldrb	r3, [r7, #4]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d9ed      	bls.n	800511c <processReceivedData_EF+0x60>
  }
  for(uint8_t k = 0; k < 4; k++)
 8005140:	2300      	movs	r3, #0
 8005142:	70fb      	strb	r3, [r7, #3]
 8005144:	e00e      	b.n	8005164 <processReceivedData_EF+0xa8>
  {
  	RS485_RX_VERIFIED_DATA_EF.SC_V.array[k] = dataFromRx_EF[++i];
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	3301      	adds	r3, #1
 800514a:	71fb      	strb	r3, [r7, #7]
 800514c:	79fa      	ldrb	r2, [r7, #7]
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	491b      	ldr	r1, [pc, #108]	; (80051c0 <processReceivedData_EF+0x104>)
 8005152:	5c8a      	ldrb	r2, [r1, r2]
 8005154:	b2d1      	uxtb	r1, r2
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <processReceivedData_EF+0x108>)
 8005158:	4413      	add	r3, r2
 800515a:	460a      	mov	r2, r1
 800515c:	731a      	strb	r2, [r3, #12]
  for(uint8_t k = 0; k < 4; k++)
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	3301      	adds	r3, #1
 8005162:	70fb      	strb	r3, [r7, #3]
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d9ed      	bls.n	8005146 <processReceivedData_EF+0x8a>
  }
  for(uint8_t k = 0; k < 2; k++)
 800516a:	2300      	movs	r3, #0
 800516c:	70bb      	strb	r3, [r7, #2]
 800516e:	e00e      	b.n	800518e <processReceivedData_EF+0xd2>
  {
  	RS485_RX_VERIFIED_DATA_EF.fcFanRPM.array[k] = dataFromRx_EF[++i];
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	3301      	adds	r3, #1
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	79fa      	ldrb	r2, [r7, #7]
 8005178:	78bb      	ldrb	r3, [r7, #2]
 800517a:	4911      	ldr	r1, [pc, #68]	; (80051c0 <processReceivedData_EF+0x104>)
 800517c:	5c8a      	ldrb	r2, [r1, r2]
 800517e:	b2d1      	uxtb	r1, r2
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <processReceivedData_EF+0x108>)
 8005182:	4413      	add	r3, r2
 8005184:	460a      	mov	r2, r1
 8005186:	741a      	strb	r2, [r3, #16]
  for(uint8_t k = 0; k < 2; k++)
 8005188:	78bb      	ldrb	r3, [r7, #2]
 800518a:	3301      	adds	r3, #1
 800518c:	70bb      	strb	r3, [r7, #2]
 800518e:	78bb      	ldrb	r3, [r7, #2]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d9ed      	bls.n	8005170 <processReceivedData_EF+0xb4>
  }
  //	RS485_RX_VERIFIED_DATA_EF.fcToScMosfetPWM = dataFromRx_EF[++i];
  	RS485_RX_VERIFIED_DATA_EF.emergency = dataFromRx_EF[++i];
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	3301      	adds	r3, #1
 8005198:	71fb      	strb	r3, [r7, #7]
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <processReceivedData_EF+0x104>)
 800519e:	5cd3      	ldrb	r3, [r2, r3]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <processReceivedData_EF+0x108>)
 80051a4:	749a      	strb	r2, [r3, #18]

  	dataFromRx_SW[++i] = EOT_BYTE_EF;
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	3301      	adds	r3, #1
 80051aa:	71fb      	strb	r3, [r7, #7]
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	4a06      	ldr	r2, [pc, #24]	; (80051c8 <processReceivedData_EF+0x10c>)
 80051b0:	2117      	movs	r1, #23
 80051b2:	54d1      	strb	r1, [r2, r3]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000038 	.word	0x20000038
 80051c4:	20000468 	.word	0x20000468
 80051c8:	20000028 	.word	0x20000028

080051cc <resetActData_EF>:
/**
* @fn resetActData_EF
* @brief Zerowanie zmiennych docelowych (odbywa sie m.in w przypadku zerwania transmisji) dla przeplywu energii
*/
static void resetActData_EF(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0

  for(uint8_t k = 0; k < 4; k++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	e006      	b.n	80051e6 <resetActData_EF+0x1a>
  	{
	  RS485_RX_VERIFIED_DATA_EF.FC_V.array[k] = 0;
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <resetActData_EF+0xa4>)
 80051dc:	2100      	movs	r1, #0
 80051de:	54d1      	strb	r1, [r2, r3]
  for(uint8_t k = 0; k < 4; k++)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	3301      	adds	r3, #1
 80051e4:	71fb      	strb	r3, [r7, #7]
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d9f5      	bls.n	80051d8 <resetActData_EF+0xc>
    }

  for (uint8_t k = 0; k < 4; k++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	71bb      	strb	r3, [r7, #6]
 80051f0:	e007      	b.n	8005202 <resetActData_EF+0x36>
    {
      RS485_RX_VERIFIED_DATA_EF.FC_TEMP.array[k] = 0;
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <resetActData_EF+0xa4>)
 80051f6:	4413      	add	r3, r2
 80051f8:	2200      	movs	r2, #0
 80051fa:	711a      	strb	r2, [r3, #4]
  for (uint8_t k = 0; k < 4; k++)
 80051fc:	79bb      	ldrb	r3, [r7, #6]
 80051fe:	3301      	adds	r3, #1
 8005200:	71bb      	strb	r3, [r7, #6]
 8005202:	79bb      	ldrb	r3, [r7, #6]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d9f4      	bls.n	80051f2 <resetActData_EF+0x26>
    }
  for (uint8_t k = 0; k < 4; k++)
 8005208:	2300      	movs	r3, #0
 800520a:	717b      	strb	r3, [r7, #5]
 800520c:	e007      	b.n	800521e <resetActData_EF+0x52>
    {
      RS485_RX_VERIFIED_DATA_EF.CURRENT_SENSOR_FC_TO_SC.array[k] = 0;
 800520e:	797b      	ldrb	r3, [r7, #5]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <resetActData_EF+0xa4>)
 8005212:	4413      	add	r3, r2
 8005214:	2200      	movs	r2, #0
 8005216:	721a      	strb	r2, [r3, #8]
  for (uint8_t k = 0; k < 4; k++)
 8005218:	797b      	ldrb	r3, [r7, #5]
 800521a:	3301      	adds	r3, #1
 800521c:	717b      	strb	r3, [r7, #5]
 800521e:	797b      	ldrb	r3, [r7, #5]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d9f4      	bls.n	800520e <resetActData_EF+0x42>
    }
  for (uint8_t k = 0; k < 4; k++)
 8005224:	2300      	movs	r3, #0
 8005226:	713b      	strb	r3, [r7, #4]
 8005228:	e007      	b.n	800523a <resetActData_EF+0x6e>
    {
      RS485_RX_VERIFIED_DATA_EF.SC_V.array[k] = 0;
 800522a:	793b      	ldrb	r3, [r7, #4]
 800522c:	4a10      	ldr	r2, [pc, #64]	; (8005270 <resetActData_EF+0xa4>)
 800522e:	4413      	add	r3, r2
 8005230:	2200      	movs	r2, #0
 8005232:	731a      	strb	r2, [r3, #12]
  for (uint8_t k = 0; k < 4; k++)
 8005234:	793b      	ldrb	r3, [r7, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	713b      	strb	r3, [r7, #4]
 800523a:	793b      	ldrb	r3, [r7, #4]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d9f4      	bls.n	800522a <resetActData_EF+0x5e>
    }
  for (uint8_t k = 0; k < 2; k++)
 8005240:	2300      	movs	r3, #0
 8005242:	70fb      	strb	r3, [r7, #3]
 8005244:	e007      	b.n	8005256 <resetActData_EF+0x8a>
    {
      RS485_RX_VERIFIED_DATA_EF.fcFanRPM.array[k] = 0;
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	4a09      	ldr	r2, [pc, #36]	; (8005270 <resetActData_EF+0xa4>)
 800524a:	4413      	add	r3, r2
 800524c:	2200      	movs	r2, #0
 800524e:	741a      	strb	r2, [r3, #16]
  for (uint8_t k = 0; k < 2; k++)
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	3301      	adds	r3, #1
 8005254:	70fb      	strb	r3, [r7, #3]
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d9f4      	bls.n	8005246 <resetActData_EF+0x7a>
    }
  RS485_RX_VERIFIED_DATA_EF.emergency = 0;
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <resetActData_EF+0xa4>)
 800525e:	2200      	movs	r2, #0
 8005260:	749a      	strb	r2, [r3, #18]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000468 	.word	0x20000468

08005274 <timers_init>:
/**
* @fn timers_init(void)
* @brief Funkcja inicjalizujaca timery
*/
void timers_init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);		//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 8005278:	4803      	ldr	r0, [pc, #12]	; (8005288 <timers_init+0x14>)
 800527a:	f7fe f980 	bl	800357e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);		//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 800527e:	4803      	ldr	r0, [pc, #12]	; (800528c <timers_init+0x18>)
 8005280:	f7fe f97d 	bl	800357e <HAL_TIM_Base_Start_IT>
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000013c 	.word	0x2000013c
 800528c:	200001bc 	.word	0x200001bc

08005290 <timers_step>:
/**
* @fn timers_main(void)
* @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
*/
static inline void timers_step(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 8005294:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <timers_step+0x14>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 800529a:	f000 f805 	bl	80052a8 <setSystemOperatingTime>
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	2000048c 	.word	0x2000048c

080052a8 <setSystemOperatingTime>:
/**
* @fn setSystemOperatingTime(void)
* @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
*/
static inline void setSystemOperatingTime(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 80052ac:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <setSystemOperatingTime+0x78>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3301      	adds	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <setSystemOperatingTime+0x78>)
 80052b8:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 80052ba:	4b19      	ldr	r3, [pc, #100]	; (8005320 <setSystemOperatingTime+0x78>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c4:	d309      	bcc.n	80052da <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <setSystemOperatingTime+0x78>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 80052cc:	4b15      	ldr	r3, [pc, #84]	; (8005324 <setSystemOperatingTime+0x7c>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	3301      	adds	r3, #1
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <setSystemOperatingTime+0x7c>)
 80052d8:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <setSystemOperatingTime+0x7c>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b3b      	cmp	r3, #59	; 0x3b
 80052e2:	d909      	bls.n	80052f8 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <setSystemOperatingTime+0x7c>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <setSystemOperatingTime+0x80>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	3301      	adds	r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <setSystemOperatingTime+0x80>)
 80052f6:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <setSystemOperatingTime+0x80>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b3b      	cmp	r3, #59	; 0x3b
 8005300:	d909      	bls.n	8005316 <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <setSystemOperatingTime+0x80>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <setSystemOperatingTime+0x84>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3301      	adds	r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <setSystemOperatingTime+0x84>)
 8005314:	701a      	strb	r2, [r3, #0]
    }
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	2000048a 	.word	0x2000048a
 8005324:	2000049c 	.word	0x2000049c
 8005328:	20000494 	.word	0x20000494
 800532c:	2000048d 	.word	0x2000048d

08005330 <timers_beforeStep1kHz>:
/**
* @fn timers_beforeStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
*/
void timers_beforeStep1kHz(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <timers_beforeStep1kHz+0x14>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	2000006c 	.word	0x2000006c

08005348 <timers_afterStep1kHz>:
/**
* @fn timers_afterStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
*/
void timers_afterStep1kHz(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 800534c:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <timers_afterStep1kHz+0xb0>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 8005354:	4b29      	ldr	r3, [pc, #164]	; (80053fc <timers_afterStep1kHz+0xb4>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	461a      	mov	r2, r3
 8005362:	4b27      	ldr	r3, [pc, #156]	; (8005400 <timers_afterStep1kHz+0xb8>)
 8005364:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <timers_afterStep1kHz+0xb0>)
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; //Przeliczenie otrzymanej wartosci na mikrosekundy
 800536c:	4b23      	ldr	r3, [pc, #140]	; (80053fc <timers_afterStep1kHz+0xb4>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	461a      	mov	r2, r3
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <timers_afterStep1kHz+0xbc>)
 800537c:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 800537e:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <timers_afterStep1kHz+0xb4>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 8005384:	4b20      	ldr	r3, [pc, #128]	; (8005408 <timers_afterStep1kHz+0xc0>)
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	2b64      	cmp	r3, #100	; 0x64
 800538a:	d80d      	bhi.n	80053a8 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <timers_afterStep1kHz+0xc4>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <timers_afterStep1kHz+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <timers_afterStep1kHz+0xc4>)
 8005398:	6013      	str	r3, [r2, #0]
      avgCnt++;
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <timers_afterStep1kHz+0xc0>)
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b19      	ldr	r3, [pc, #100]	; (8005408 <timers_afterStep1kHz+0xc0>)
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e00d      	b.n	80053c4 <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod =  avgSysCyclePeriodSum / avgCnt;
 80053a8:	4b18      	ldr	r3, [pc, #96]	; (800540c <timers_afterStep1kHz+0xc4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <timers_afterStep1kHz+0xc0>)
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <timers_afterStep1kHz+0xc8>)
 80053b6:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <timers_afterStep1kHz+0xc4>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <timers_afterStep1kHz+0xc0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <timers_afterStep1kHz+0xbc>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <timers_afterStep1kHz+0xb8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d203      	bcs.n	80053d8 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod =  actSysCyclePeriod;
 80053d0:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <timers_afterStep1kHz+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <timers_afterStep1kHz+0xb8>)
 80053d6:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <timers_afterStep1kHz+0xbc>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <timers_afterStep1kHz+0xcc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d903      	bls.n	80053ec <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <timers_afterStep1kHz+0xbc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <timers_afterStep1kHz+0xcc>)
 80053ea:	6013      	str	r3, [r2, #0]
    }
}
 80053ec:	bf00      	nop
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000070 	.word	0x20000070
 80053fc:	2000006c 	.word	0x2000006c
 8005400:	20000498 	.word	0x20000498
 8005404:	20000074 	.word	0x20000074
 8005408:	20000078 	.word	0x20000078
 800540c:	2000007c 	.word	0x2000007c
 8005410:	200004a0 	.word	0x200004a0
 8005414:	20000490 	.word	0x20000490

08005418 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  timers_step();
 800541c:	f7ff ff38 	bl	8005290 <timers_step>
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d102      	bne.n	800543c <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d104      	bne.n	8005450 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3301      	adds	r3, #1
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800544e:	6013      	str	r3, [r2, #0]
    }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40001000 	.word	0x40001000
 8005460:	20000488 	.word	0x20000488
 8005464:	40001400 	.word	0x40001400
 8005468:	2000006c 	.word	0x2000006c

0800546c <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8005470:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <watchdog_init+0x58>)
 8005472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005474:	2b00      	cmp	r3, #0
 8005476:	da03      	bge.n	8005480 <watchdog_init+0x14>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <watchdog_init+0x5c>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e01c      	b.n	80054ba <watchdog_init+0x4e>
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8005480:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <watchdog_init+0x58>)
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <watchdog_init+0x28>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <watchdog_init+0x5c>)
 800548e:	2202      	movs	r2, #2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e012      	b.n	80054ba <watchdog_init+0x4e>
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <watchdog_init+0x58>)
 8005496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <watchdog_init+0x3c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <watchdog_init+0x5c>)
 80054a2:	2203      	movs	r2, #3
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e008      	b.n	80054ba <watchdog_init+0x4e>
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <watchdog_init+0x58>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <watchdog_init+0x4e>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <watchdog_init+0x5c>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 80054ba:	4804      	ldr	r0, [pc, #16]	; (80054cc <watchdog_init+0x60>)
 80054bc:	f7fd faae 	bl	8002a1c <HAL_IWDG_Refresh>
}
 80054c0:	bf00      	nop
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	200004a4 	.word	0x200004a4
 80054cc:	20000130 	.word	0x20000130

080054d0 <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <watchdog_step+0x10>)
 80054d6:	f7fd faa1 	bl	8002a1c <HAL_IWDG_Refresh>
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000130 	.word	0x20000130

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f820 	bl	800553c <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	0800557c 	.word	0x0800557c
 8005520:	0800557c 	.word	0x0800557c
 8005524:	0800557c 	.word	0x0800557c
 8005528:	08005580 	.word	0x08005580

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
